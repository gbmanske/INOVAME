-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    terms : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_kernel,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg484-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.518000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=657,HLS_SYN_LUT=1462,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_20 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_const_lv11_7E0 : STD_LOGIC_VECTOR (10 downto 0) := "11111100000";
    constant ap_const_lv11_20 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_const_lv11_36 : STD_LOGIC_VECTOR (10 downto 0) := "00000110110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv54_3FFFFFFFFFFFFF : STD_LOGIC_VECTOR (53 downto 0) := "111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln22_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal n_1_reg_440 : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter1_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter2_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter3_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter4_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter5_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter6_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter7_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter8_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter9_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter10_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter11_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter12_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter13_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter14_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter15_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter16_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter17_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter18_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter19_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter20_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter21_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter22_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter23_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter24_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter25_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter26_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter27_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter28_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter29_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter30_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter31_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter32_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter33_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter34_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter35_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter36_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal n_1_reg_440_pp0_iter37_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln22_reg_445 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_445_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_99_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_reg_454 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_94_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal pf_reg_459 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_4_fu_158_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_4_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_fu_202_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal z_reg_469 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln23_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln23_2_fu_222_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln23_2_reg_482 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln23_1_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_1_reg_488 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_2_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_2_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_8_fu_379_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_8_reg_501 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fu_80 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal x_1_fu_405_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_allocacmp_x_load : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal n_fu_84 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    signal n_2_fu_125_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_sig_allocacmp_n_1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_99_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_fu_115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_131_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln724_fu_151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_fu_166_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln23_1_fu_180_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln23_1_cast_fu_184_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln23_1_fu_192_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln23_fu_196_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln23_fu_154_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln23_fu_176_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln23_1_fu_216_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln23_fu_238_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln23_2_fu_243_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln23_1_fu_248_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_fu_264_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln23_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_2_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln23_4_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_1_fu_284_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_3_fu_298_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal z_3_fu_302_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal xor_ln23_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_5_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_fu_321_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal z_6_fu_334_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal or_ln23_1_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_2_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln23_2_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_2_fu_290_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln23_3_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln23_1_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_1_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_2_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln23_1_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_7_fu_354_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln22_fu_390_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_9_fu_393_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_10_fu_398_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_348 : BOOLEAN;
    signal ap_condition_346 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_ddiv_64ns_64ns_64_31_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_sitodp_64ns_64_5_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    ddiv_64ns_64ns_64_31_no_dsp_1_U1 : component kernel_ddiv_64ns_64ns_64_31_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => conv_reg_454,
        ce => ap_const_logic_1,
        dout => grp_fu_94_p2);

    sitodp_64ns_64_5_no_dsp_1_U2 : component kernel_sitodp_64ns_64_5_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_99_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_99_p1);

    flow_control_loop_pipe_U : component kernel_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter37_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    n_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_348)) then
                if ((icmp_ln22_fu_119_p2 = ap_const_lv1_1)) then 
                    n_fu_84 <= n_2_fu_125_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_84 <= ap_const_lv63_0;
                end if;
            end if; 
        end if;
    end process;

    x_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_346)) then 
                    x_fu_80 <= ap_const_lv64_0;
                elsif ((ap_enable_reg_pp0_iter38 = ap_const_logic_1)) then 
                    x_fu_80 <= x_1_fu_405_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                conv_reg_454 <= grp_fu_99_p1;
                icmp_ln22_reg_445_pp0_iter10_reg <= icmp_ln22_reg_445_pp0_iter9_reg;
                icmp_ln22_reg_445_pp0_iter11_reg <= icmp_ln22_reg_445_pp0_iter10_reg;
                icmp_ln22_reg_445_pp0_iter12_reg <= icmp_ln22_reg_445_pp0_iter11_reg;
                icmp_ln22_reg_445_pp0_iter13_reg <= icmp_ln22_reg_445_pp0_iter12_reg;
                icmp_ln22_reg_445_pp0_iter14_reg <= icmp_ln22_reg_445_pp0_iter13_reg;
                icmp_ln22_reg_445_pp0_iter15_reg <= icmp_ln22_reg_445_pp0_iter14_reg;
                icmp_ln22_reg_445_pp0_iter16_reg <= icmp_ln22_reg_445_pp0_iter15_reg;
                icmp_ln22_reg_445_pp0_iter17_reg <= icmp_ln22_reg_445_pp0_iter16_reg;
                icmp_ln22_reg_445_pp0_iter18_reg <= icmp_ln22_reg_445_pp0_iter17_reg;
                icmp_ln22_reg_445_pp0_iter19_reg <= icmp_ln22_reg_445_pp0_iter18_reg;
                icmp_ln22_reg_445_pp0_iter20_reg <= icmp_ln22_reg_445_pp0_iter19_reg;
                icmp_ln22_reg_445_pp0_iter21_reg <= icmp_ln22_reg_445_pp0_iter20_reg;
                icmp_ln22_reg_445_pp0_iter22_reg <= icmp_ln22_reg_445_pp0_iter21_reg;
                icmp_ln22_reg_445_pp0_iter23_reg <= icmp_ln22_reg_445_pp0_iter22_reg;
                icmp_ln22_reg_445_pp0_iter24_reg <= icmp_ln22_reg_445_pp0_iter23_reg;
                icmp_ln22_reg_445_pp0_iter25_reg <= icmp_ln22_reg_445_pp0_iter24_reg;
                icmp_ln22_reg_445_pp0_iter26_reg <= icmp_ln22_reg_445_pp0_iter25_reg;
                icmp_ln22_reg_445_pp0_iter27_reg <= icmp_ln22_reg_445_pp0_iter26_reg;
                icmp_ln22_reg_445_pp0_iter28_reg <= icmp_ln22_reg_445_pp0_iter27_reg;
                icmp_ln22_reg_445_pp0_iter29_reg <= icmp_ln22_reg_445_pp0_iter28_reg;
                icmp_ln22_reg_445_pp0_iter2_reg <= icmp_ln22_reg_445_pp0_iter1_reg;
                icmp_ln22_reg_445_pp0_iter30_reg <= icmp_ln22_reg_445_pp0_iter29_reg;
                icmp_ln22_reg_445_pp0_iter31_reg <= icmp_ln22_reg_445_pp0_iter30_reg;
                icmp_ln22_reg_445_pp0_iter32_reg <= icmp_ln22_reg_445_pp0_iter31_reg;
                icmp_ln22_reg_445_pp0_iter33_reg <= icmp_ln22_reg_445_pp0_iter32_reg;
                icmp_ln22_reg_445_pp0_iter34_reg <= icmp_ln22_reg_445_pp0_iter33_reg;
                icmp_ln22_reg_445_pp0_iter35_reg <= icmp_ln22_reg_445_pp0_iter34_reg;
                icmp_ln22_reg_445_pp0_iter36_reg <= icmp_ln22_reg_445_pp0_iter35_reg;
                icmp_ln22_reg_445_pp0_iter3_reg <= icmp_ln22_reg_445_pp0_iter2_reg;
                icmp_ln22_reg_445_pp0_iter4_reg <= icmp_ln22_reg_445_pp0_iter3_reg;
                icmp_ln22_reg_445_pp0_iter5_reg <= icmp_ln22_reg_445_pp0_iter4_reg;
                icmp_ln22_reg_445_pp0_iter6_reg <= icmp_ln22_reg_445_pp0_iter5_reg;
                icmp_ln22_reg_445_pp0_iter7_reg <= icmp_ln22_reg_445_pp0_iter6_reg;
                icmp_ln22_reg_445_pp0_iter8_reg <= icmp_ln22_reg_445_pp0_iter7_reg;
                icmp_ln22_reg_445_pp0_iter9_reg <= icmp_ln22_reg_445_pp0_iter8_reg;
                icmp_ln23_1_reg_488 <= icmp_ln23_1_fu_226_p2;
                icmp_ln23_2_reg_495 <= icmp_ln23_2_fu_232_p2;
                icmp_ln23_reg_476 <= icmp_ln23_fu_210_p2;
                n_1_reg_440_pp0_iter10_reg <= n_1_reg_440_pp0_iter9_reg;
                n_1_reg_440_pp0_iter11_reg <= n_1_reg_440_pp0_iter10_reg;
                n_1_reg_440_pp0_iter12_reg <= n_1_reg_440_pp0_iter11_reg;
                n_1_reg_440_pp0_iter13_reg <= n_1_reg_440_pp0_iter12_reg;
                n_1_reg_440_pp0_iter14_reg <= n_1_reg_440_pp0_iter13_reg;
                n_1_reg_440_pp0_iter15_reg <= n_1_reg_440_pp0_iter14_reg;
                n_1_reg_440_pp0_iter16_reg <= n_1_reg_440_pp0_iter15_reg;
                n_1_reg_440_pp0_iter17_reg <= n_1_reg_440_pp0_iter16_reg;
                n_1_reg_440_pp0_iter18_reg <= n_1_reg_440_pp0_iter17_reg;
                n_1_reg_440_pp0_iter19_reg <= n_1_reg_440_pp0_iter18_reg;
                n_1_reg_440_pp0_iter20_reg <= n_1_reg_440_pp0_iter19_reg;
                n_1_reg_440_pp0_iter21_reg <= n_1_reg_440_pp0_iter20_reg;
                n_1_reg_440_pp0_iter22_reg <= n_1_reg_440_pp0_iter21_reg;
                n_1_reg_440_pp0_iter23_reg <= n_1_reg_440_pp0_iter22_reg;
                n_1_reg_440_pp0_iter24_reg <= n_1_reg_440_pp0_iter23_reg;
                n_1_reg_440_pp0_iter25_reg <= n_1_reg_440_pp0_iter24_reg;
                n_1_reg_440_pp0_iter26_reg <= n_1_reg_440_pp0_iter25_reg;
                n_1_reg_440_pp0_iter27_reg <= n_1_reg_440_pp0_iter26_reg;
                n_1_reg_440_pp0_iter28_reg <= n_1_reg_440_pp0_iter27_reg;
                n_1_reg_440_pp0_iter29_reg <= n_1_reg_440_pp0_iter28_reg;
                n_1_reg_440_pp0_iter2_reg <= n_1_reg_440_pp0_iter1_reg;
                n_1_reg_440_pp0_iter30_reg <= n_1_reg_440_pp0_iter29_reg;
                n_1_reg_440_pp0_iter31_reg <= n_1_reg_440_pp0_iter30_reg;
                n_1_reg_440_pp0_iter32_reg <= n_1_reg_440_pp0_iter31_reg;
                n_1_reg_440_pp0_iter33_reg <= n_1_reg_440_pp0_iter32_reg;
                n_1_reg_440_pp0_iter34_reg <= n_1_reg_440_pp0_iter33_reg;
                n_1_reg_440_pp0_iter35_reg <= n_1_reg_440_pp0_iter34_reg;
                n_1_reg_440_pp0_iter36_reg <= n_1_reg_440_pp0_iter35_reg;
                n_1_reg_440_pp0_iter37_reg <= n_1_reg_440_pp0_iter36_reg;
                n_1_reg_440_pp0_iter3_reg <= n_1_reg_440_pp0_iter2_reg;
                n_1_reg_440_pp0_iter4_reg <= n_1_reg_440_pp0_iter3_reg;
                n_1_reg_440_pp0_iter5_reg <= n_1_reg_440_pp0_iter4_reg;
                n_1_reg_440_pp0_iter6_reg <= n_1_reg_440_pp0_iter5_reg;
                n_1_reg_440_pp0_iter7_reg <= n_1_reg_440_pp0_iter6_reg;
                n_1_reg_440_pp0_iter8_reg <= n_1_reg_440_pp0_iter7_reg;
                n_1_reg_440_pp0_iter9_reg <= n_1_reg_440_pp0_iter8_reg;
                pf_reg_459 <= grp_fu_94_p2;
                trunc_ln23_2_reg_482 <= trunc_ln23_2_fu_222_p1;
                z_4_reg_464 <= bitcast_ln724_fu_151_p1(63 downto 63);
                z_8_reg_501 <= z_8_fu_379_p3;
                z_reg_469 <= z_fu_202_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln22_reg_445 <= icmp_ln22_fu_119_p2;
                icmp_ln22_reg_445_pp0_iter1_reg <= icmp_ln22_reg_445;
                n_1_reg_440 <= ap_sig_allocacmp_n_1;
                n_1_reg_440_pp0_iter1_reg <= n_1_reg_440;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln23_fu_238_p2 <= std_logic_vector(unsigned(trunc_ln23_2_reg_482) + unsigned(ap_const_lv11_7E0));
    and_ln23_1_fu_368_p2 <= (xor_ln23_1_fu_362_p2 and icmp_ln23_3_fu_258_p2);
    and_ln23_2_fu_374_p2 <= (icmp_ln23_1_reg_488 and and_ln23_1_fu_368_p2);
    and_ln23_fu_329_p2 <= (xor_ln23_fu_311_p2 and icmp_ln23_2_reg_495);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_346_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init)
    begin
                ap_condition_346 <= ((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_348_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_348 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln22_fu_119_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln22_fu_119_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter37_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter37_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(shift_left(unsigned(ap_sig_allocacmp_x_load),to_integer(unsigned('0' & ap_const_lv64_2(31-1 downto 0)))));

    ap_sig_allocacmp_n_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, n_fu_84)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_n_1 <= ap_const_lv63_0;
        else 
            ap_sig_allocacmp_n_1 <= n_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_x_load_assign_proc : process(ap_enable_reg_pp0_iter38, x_fu_80, x_1_fu_405_p2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
            ap_sig_allocacmp_x_load <= x_1_fu_405_p2;
        else 
            ap_sig_allocacmp_x_load <= x_fu_80;
        end if; 
    end process;

    bitcast_ln724_fu_151_p1 <= pf_reg_459;
    grp_fu_99_p0 <= (shl_ln_fu_131_p3 or ap_const_lv64_1);
    icmp_ln22_fu_119_p2 <= "1" when (signed(zext_ln22_fu_115_p1) < signed(terms)) else "0";
    icmp_ln23_1_fu_226_p2 <= "1" when (signed(sub_ln23_1_fu_216_p2) > signed(ap_const_lv12_20)) else "0";
    icmp_ln23_2_fu_232_p2 <= "1" when (sub_ln23_1_fu_216_p2 = ap_const_lv12_20) else "0";
    icmp_ln23_3_fu_258_p2 <= "1" when (unsigned(select_ln23_1_fu_248_p3) < unsigned(ap_const_lv11_36)) else "0";
    icmp_ln23_4_fu_274_p2 <= "1" when (tmp_1_fu_264_p4 = ap_const_lv5_0) else "0";
    icmp_ln23_fu_210_p2 <= "1" when (trunc_ln23_fu_154_p1 = ap_const_lv63_0) else "0";
    n_2_fu_125_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_1) + unsigned(ap_const_lv63_1));
    or_ln23_1_fu_345_p2 <= (icmp_ln23_reg_476 or icmp_ln23_2_reg_495);
    or_ln23_2_fu_349_p2 <= (or_ln23_1_fu_345_p2 or icmp_ln23_1_reg_488);
    select_ln23_1_fu_248_p3 <= 
        add_ln23_fu_238_p2 when (icmp_ln23_1_reg_488(0) = '1') else 
        sub_ln23_2_fu_243_p2;
    select_ln23_fu_321_p3 <= 
        ap_const_lv54_3FFFFFFFFFFFFF when (z_5_fu_316_p2(0) = '1') else 
        ap_const_lv54_0;
        sext_ln23_1_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_3_fu_302_p2),64));

        sext_ln23_2_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_6_fu_334_p3),64));

        sext_ln23_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_reg_469),64));

    shl_ln_fu_131_p3 <= (ap_sig_allocacmp_n_1 & ap_const_lv1_0);
    sub_ln23_1_fu_216_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln23_fu_176_p1));
    sub_ln23_2_fu_243_p2 <= std_logic_vector(unsigned(ap_const_lv11_20) - unsigned(trunc_ln23_2_reg_482));
    sub_ln23_fu_196_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln23_1_fu_192_p1));
    tmp2_fu_166_p4 <= bitcast_ln724_fu_151_p1(62 downto 52);
    tmp_1_fu_264_p4 <= select_ln23_1_fu_248_p3(10 downto 6);
    trunc_ln22_fu_390_p1 <= n_1_reg_440_pp0_iter37_reg(1 - 1 downto 0);
    trunc_ln23_1_fu_180_p1 <= bitcast_ln724_fu_151_p1(52 - 1 downto 0);
    trunc_ln23_2_fu_222_p1 <= sub_ln23_1_fu_216_p2(11 - 1 downto 0);
    trunc_ln23_fu_154_p1 <= bitcast_ln724_fu_151_p1(63 - 1 downto 0);
    x_1_fu_405_p2 <= std_logic_vector(unsigned(z_10_fu_398_p3) + unsigned(x_fu_80));
    xor_ln23_1_fu_362_p2 <= (or_ln23_1_fu_345_p2 xor ap_const_lv1_1);
    xor_ln23_fu_311_p2 <= (icmp_ln23_reg_476 xor ap_const_lv1_1);
    z_10_fu_398_p3 <= 
        z_9_fu_393_p2 when (trunc_ln22_fu_390_p1(0) = '1') else 
        z_8_reg_501;
    z_1_fu_284_p2 <= std_logic_vector(shift_left(unsigned(sext_ln23_fu_255_p1),to_integer(unsigned('0' & zext_ln23_2_fu_280_p1(31-1 downto 0)))));
    z_2_fu_290_p3 <= 
        z_1_fu_284_p2 when (icmp_ln23_4_fu_274_p2(0) = '1') else 
        ap_const_lv64_0;
    z_3_fu_302_p2 <= std_logic_vector(shift_right(signed(z_reg_469),to_integer(unsigned('0' & zext_ln23_3_fu_298_p1(31-1 downto 0)))));
    z_4_fu_158_p3 <= bitcast_ln724_fu_151_p1(63 downto 63);
    z_5_fu_316_p2 <= (z_4_reg_464 and xor_ln23_fu_311_p2);
    z_6_fu_334_p3 <= 
        z_reg_469 when (and_ln23_fu_329_p2(0) = '1') else 
        select_ln23_fu_321_p3;
    z_7_fu_354_p3 <= 
        sext_ln23_2_fu_341_p1 when (or_ln23_2_fu_349_p2(0) = '1') else 
        z_2_fu_290_p3;
    z_8_fu_379_p3 <= 
        sext_ln23_1_fu_307_p1 when (and_ln23_2_fu_374_p2(0) = '1') else 
        z_7_fu_354_p3;
    z_9_fu_393_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(z_8_reg_501));
    z_fu_202_p3 <= 
        sub_ln23_fu_196_p2 when (z_4_fu_158_p3(0) = '1') else 
        zext_ln23_1_fu_192_p1;
    zext_ln22_fu_115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_n_1),64));
    zext_ln23_1_cast_fu_184_p3 <= (ap_const_lv1_1 & trunc_ln23_1_fu_180_p1);
    zext_ln23_1_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_1_cast_fu_184_p3),54));
    zext_ln23_2_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_1_fu_248_p3),64));
    zext_ln23_3_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_1_fu_248_p3),54));
    zext_ln23_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_166_p4),12));
end behav;
