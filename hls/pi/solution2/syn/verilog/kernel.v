// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel_kernel,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg484-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.518000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=657,HLS_SYN_LUT=1462,HLS_VERSION=2023_2}" *)

module kernel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        terms,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] terms;
output  [63:0] ap_return;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln22_fu_119_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [62:0] n_1_reg_440;
reg   [62:0] n_1_reg_440_pp0_iter1_reg;
reg   [62:0] n_1_reg_440_pp0_iter2_reg;
reg   [62:0] n_1_reg_440_pp0_iter3_reg;
reg   [62:0] n_1_reg_440_pp0_iter4_reg;
reg   [62:0] n_1_reg_440_pp0_iter5_reg;
reg   [62:0] n_1_reg_440_pp0_iter6_reg;
reg   [62:0] n_1_reg_440_pp0_iter7_reg;
reg   [62:0] n_1_reg_440_pp0_iter8_reg;
reg   [62:0] n_1_reg_440_pp0_iter9_reg;
reg   [62:0] n_1_reg_440_pp0_iter10_reg;
reg   [62:0] n_1_reg_440_pp0_iter11_reg;
reg   [62:0] n_1_reg_440_pp0_iter12_reg;
reg   [62:0] n_1_reg_440_pp0_iter13_reg;
reg   [62:0] n_1_reg_440_pp0_iter14_reg;
reg   [62:0] n_1_reg_440_pp0_iter15_reg;
reg   [62:0] n_1_reg_440_pp0_iter16_reg;
reg   [62:0] n_1_reg_440_pp0_iter17_reg;
reg   [62:0] n_1_reg_440_pp0_iter18_reg;
reg   [62:0] n_1_reg_440_pp0_iter19_reg;
reg   [62:0] n_1_reg_440_pp0_iter20_reg;
reg   [62:0] n_1_reg_440_pp0_iter21_reg;
reg   [62:0] n_1_reg_440_pp0_iter22_reg;
reg   [62:0] n_1_reg_440_pp0_iter23_reg;
reg   [62:0] n_1_reg_440_pp0_iter24_reg;
reg   [62:0] n_1_reg_440_pp0_iter25_reg;
reg   [62:0] n_1_reg_440_pp0_iter26_reg;
reg   [62:0] n_1_reg_440_pp0_iter27_reg;
reg   [62:0] n_1_reg_440_pp0_iter28_reg;
reg   [62:0] n_1_reg_440_pp0_iter29_reg;
reg   [62:0] n_1_reg_440_pp0_iter30_reg;
reg   [62:0] n_1_reg_440_pp0_iter31_reg;
reg   [62:0] n_1_reg_440_pp0_iter32_reg;
reg   [62:0] n_1_reg_440_pp0_iter33_reg;
reg   [62:0] n_1_reg_440_pp0_iter34_reg;
reg   [62:0] n_1_reg_440_pp0_iter35_reg;
reg   [62:0] n_1_reg_440_pp0_iter36_reg;
reg   [62:0] n_1_reg_440_pp0_iter37_reg;
reg   [0:0] icmp_ln22_reg_445;
reg   [0:0] icmp_ln22_reg_445_pp0_iter1_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter2_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter3_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter4_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter5_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter6_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter7_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter8_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter9_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter10_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter11_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter12_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter13_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter14_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter15_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter16_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter17_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter18_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter19_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter20_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter21_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter22_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter23_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter24_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter25_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter26_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter27_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter28_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter29_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter30_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter31_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter32_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter33_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter34_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter35_reg;
reg   [0:0] icmp_ln22_reg_445_pp0_iter36_reg;
wire   [63:0] grp_fu_99_p1;
reg   [63:0] conv_reg_454;
wire   [63:0] grp_fu_94_p2;
reg   [63:0] pf_reg_459;
wire   [0:0] z_4_fu_158_p3;
reg   [0:0] z_4_reg_464;
wire  signed [53:0] z_fu_202_p3;
reg  signed [53:0] z_reg_469;
wire   [0:0] icmp_ln23_fu_210_p2;
reg   [0:0] icmp_ln23_reg_476;
wire   [10:0] trunc_ln23_2_fu_222_p1;
reg   [10:0] trunc_ln23_2_reg_482;
wire   [0:0] icmp_ln23_1_fu_226_p2;
reg   [0:0] icmp_ln23_1_reg_488;
wire   [0:0] icmp_ln23_2_fu_232_p2;
reg   [0:0] icmp_ln23_2_reg_495;
wire   [63:0] z_8_fu_379_p3;
reg   [63:0] z_8_reg_501;
reg   [63:0] x_fu_80;
wire   [63:0] x_1_fu_405_p2;
reg   [63:0] ap_sig_allocacmp_x_load;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [62:0] n_fu_84;
wire   [62:0] n_2_fu_125_p2;
reg   [62:0] ap_sig_allocacmp_n_1;
wire   [63:0] grp_fu_99_p0;
wire   [63:0] zext_ln22_fu_115_p1;
wire   [63:0] shl_ln_fu_131_p3;
wire   [63:0] bitcast_ln724_fu_151_p1;
wire   [10:0] tmp2_fu_166_p4;
wire   [51:0] trunc_ln23_1_fu_180_p1;
wire   [52:0] zext_ln23_1_cast_fu_184_p3;
wire   [53:0] zext_ln23_1_fu_192_p1;
wire   [53:0] sub_ln23_fu_196_p2;
wire   [62:0] trunc_ln23_fu_154_p1;
wire   [11:0] zext_ln23_fu_176_p1;
wire   [11:0] sub_ln23_1_fu_216_p2;
wire   [10:0] add_ln23_fu_238_p2;
wire   [10:0] sub_ln23_2_fu_243_p2;
wire   [10:0] select_ln23_1_fu_248_p3;
wire   [4:0] tmp_1_fu_264_p4;
wire  signed [63:0] sext_ln23_fu_255_p1;
wire   [63:0] zext_ln23_2_fu_280_p1;
wire   [0:0] icmp_ln23_4_fu_274_p2;
wire   [63:0] z_1_fu_284_p2;
wire   [53:0] zext_ln23_3_fu_298_p1;
wire   [53:0] z_3_fu_302_p2;
wire   [0:0] xor_ln23_fu_311_p2;
wire   [0:0] z_5_fu_316_p2;
wire   [0:0] and_ln23_fu_329_p2;
wire   [53:0] select_ln23_fu_321_p3;
wire   [53:0] z_6_fu_334_p3;
wire   [0:0] or_ln23_1_fu_345_p2;
wire   [0:0] or_ln23_2_fu_349_p2;
wire  signed [63:0] sext_ln23_2_fu_341_p1;
wire   [63:0] z_2_fu_290_p3;
wire   [0:0] icmp_ln23_3_fu_258_p2;
wire   [0:0] xor_ln23_1_fu_362_p2;
wire   [0:0] and_ln23_1_fu_368_p2;
wire   [0:0] and_ln23_2_fu_374_p2;
wire  signed [63:0] sext_ln23_1_fu_307_p1;
wire   [63:0] z_7_fu_354_p3;
wire   [0:0] trunc_ln22_fu_390_p1;
wire   [63:0] z_9_fu_393_p2;
wire   [63:0] z_10_fu_398_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg    ap_loop_exit_ready_pp0_iter29_reg;
reg    ap_loop_exit_ready_pp0_iter30_reg;
reg    ap_loop_exit_ready_pp0_iter31_reg;
reg    ap_loop_exit_ready_pp0_iter32_reg;
reg    ap_loop_exit_ready_pp0_iter33_reg;
reg    ap_loop_exit_ready_pp0_iter34_reg;
reg    ap_loop_exit_ready_pp0_iter35_reg;
reg    ap_loop_exit_ready_pp0_iter36_reg;
reg    ap_loop_exit_ready_pp0_iter37_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_348;
reg    ap_condition_346;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 x_fu_80 = 64'd0;
#0 n_fu_84 = 63'd0;
#0 ap_done_reg = 1'b0;
end

kernel_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(conv_reg_454),
    .ce(1'b1),
    .dout(grp_fu_94_p2)
);

kernel_sitodp_64ns_64_5_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sitodp_64ns_64_5_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_99_p0),
    .ce(1'b1),
    .dout(grp_fu_99_p1)
);

kernel_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter37_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_348)) begin
        if ((icmp_ln22_fu_119_p2 == 1'd1)) begin
            n_fu_84 <= n_2_fu_125_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_fu_84 <= 63'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_346)) begin
            x_fu_80 <= 64'd0;
        end else if ((ap_enable_reg_pp0_iter38 == 1'b1)) begin
            x_fu_80 <= x_1_fu_405_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
        ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
        ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
        ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
        ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
        ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
        ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
        ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
        ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        conv_reg_454 <= grp_fu_99_p1;
        icmp_ln22_reg_445_pp0_iter10_reg <= icmp_ln22_reg_445_pp0_iter9_reg;
        icmp_ln22_reg_445_pp0_iter11_reg <= icmp_ln22_reg_445_pp0_iter10_reg;
        icmp_ln22_reg_445_pp0_iter12_reg <= icmp_ln22_reg_445_pp0_iter11_reg;
        icmp_ln22_reg_445_pp0_iter13_reg <= icmp_ln22_reg_445_pp0_iter12_reg;
        icmp_ln22_reg_445_pp0_iter14_reg <= icmp_ln22_reg_445_pp0_iter13_reg;
        icmp_ln22_reg_445_pp0_iter15_reg <= icmp_ln22_reg_445_pp0_iter14_reg;
        icmp_ln22_reg_445_pp0_iter16_reg <= icmp_ln22_reg_445_pp0_iter15_reg;
        icmp_ln22_reg_445_pp0_iter17_reg <= icmp_ln22_reg_445_pp0_iter16_reg;
        icmp_ln22_reg_445_pp0_iter18_reg <= icmp_ln22_reg_445_pp0_iter17_reg;
        icmp_ln22_reg_445_pp0_iter19_reg <= icmp_ln22_reg_445_pp0_iter18_reg;
        icmp_ln22_reg_445_pp0_iter20_reg <= icmp_ln22_reg_445_pp0_iter19_reg;
        icmp_ln22_reg_445_pp0_iter21_reg <= icmp_ln22_reg_445_pp0_iter20_reg;
        icmp_ln22_reg_445_pp0_iter22_reg <= icmp_ln22_reg_445_pp0_iter21_reg;
        icmp_ln22_reg_445_pp0_iter23_reg <= icmp_ln22_reg_445_pp0_iter22_reg;
        icmp_ln22_reg_445_pp0_iter24_reg <= icmp_ln22_reg_445_pp0_iter23_reg;
        icmp_ln22_reg_445_pp0_iter25_reg <= icmp_ln22_reg_445_pp0_iter24_reg;
        icmp_ln22_reg_445_pp0_iter26_reg <= icmp_ln22_reg_445_pp0_iter25_reg;
        icmp_ln22_reg_445_pp0_iter27_reg <= icmp_ln22_reg_445_pp0_iter26_reg;
        icmp_ln22_reg_445_pp0_iter28_reg <= icmp_ln22_reg_445_pp0_iter27_reg;
        icmp_ln22_reg_445_pp0_iter29_reg <= icmp_ln22_reg_445_pp0_iter28_reg;
        icmp_ln22_reg_445_pp0_iter2_reg <= icmp_ln22_reg_445_pp0_iter1_reg;
        icmp_ln22_reg_445_pp0_iter30_reg <= icmp_ln22_reg_445_pp0_iter29_reg;
        icmp_ln22_reg_445_pp0_iter31_reg <= icmp_ln22_reg_445_pp0_iter30_reg;
        icmp_ln22_reg_445_pp0_iter32_reg <= icmp_ln22_reg_445_pp0_iter31_reg;
        icmp_ln22_reg_445_pp0_iter33_reg <= icmp_ln22_reg_445_pp0_iter32_reg;
        icmp_ln22_reg_445_pp0_iter34_reg <= icmp_ln22_reg_445_pp0_iter33_reg;
        icmp_ln22_reg_445_pp0_iter35_reg <= icmp_ln22_reg_445_pp0_iter34_reg;
        icmp_ln22_reg_445_pp0_iter36_reg <= icmp_ln22_reg_445_pp0_iter35_reg;
        icmp_ln22_reg_445_pp0_iter3_reg <= icmp_ln22_reg_445_pp0_iter2_reg;
        icmp_ln22_reg_445_pp0_iter4_reg <= icmp_ln22_reg_445_pp0_iter3_reg;
        icmp_ln22_reg_445_pp0_iter5_reg <= icmp_ln22_reg_445_pp0_iter4_reg;
        icmp_ln22_reg_445_pp0_iter6_reg <= icmp_ln22_reg_445_pp0_iter5_reg;
        icmp_ln22_reg_445_pp0_iter7_reg <= icmp_ln22_reg_445_pp0_iter6_reg;
        icmp_ln22_reg_445_pp0_iter8_reg <= icmp_ln22_reg_445_pp0_iter7_reg;
        icmp_ln22_reg_445_pp0_iter9_reg <= icmp_ln22_reg_445_pp0_iter8_reg;
        icmp_ln23_1_reg_488 <= icmp_ln23_1_fu_226_p2;
        icmp_ln23_2_reg_495 <= icmp_ln23_2_fu_232_p2;
        icmp_ln23_reg_476 <= icmp_ln23_fu_210_p2;
        n_1_reg_440_pp0_iter10_reg <= n_1_reg_440_pp0_iter9_reg;
        n_1_reg_440_pp0_iter11_reg <= n_1_reg_440_pp0_iter10_reg;
        n_1_reg_440_pp0_iter12_reg <= n_1_reg_440_pp0_iter11_reg;
        n_1_reg_440_pp0_iter13_reg <= n_1_reg_440_pp0_iter12_reg;
        n_1_reg_440_pp0_iter14_reg <= n_1_reg_440_pp0_iter13_reg;
        n_1_reg_440_pp0_iter15_reg <= n_1_reg_440_pp0_iter14_reg;
        n_1_reg_440_pp0_iter16_reg <= n_1_reg_440_pp0_iter15_reg;
        n_1_reg_440_pp0_iter17_reg <= n_1_reg_440_pp0_iter16_reg;
        n_1_reg_440_pp0_iter18_reg <= n_1_reg_440_pp0_iter17_reg;
        n_1_reg_440_pp0_iter19_reg <= n_1_reg_440_pp0_iter18_reg;
        n_1_reg_440_pp0_iter20_reg <= n_1_reg_440_pp0_iter19_reg;
        n_1_reg_440_pp0_iter21_reg <= n_1_reg_440_pp0_iter20_reg;
        n_1_reg_440_pp0_iter22_reg <= n_1_reg_440_pp0_iter21_reg;
        n_1_reg_440_pp0_iter23_reg <= n_1_reg_440_pp0_iter22_reg;
        n_1_reg_440_pp0_iter24_reg <= n_1_reg_440_pp0_iter23_reg;
        n_1_reg_440_pp0_iter25_reg <= n_1_reg_440_pp0_iter24_reg;
        n_1_reg_440_pp0_iter26_reg <= n_1_reg_440_pp0_iter25_reg;
        n_1_reg_440_pp0_iter27_reg <= n_1_reg_440_pp0_iter26_reg;
        n_1_reg_440_pp0_iter28_reg <= n_1_reg_440_pp0_iter27_reg;
        n_1_reg_440_pp0_iter29_reg <= n_1_reg_440_pp0_iter28_reg;
        n_1_reg_440_pp0_iter2_reg <= n_1_reg_440_pp0_iter1_reg;
        n_1_reg_440_pp0_iter30_reg <= n_1_reg_440_pp0_iter29_reg;
        n_1_reg_440_pp0_iter31_reg <= n_1_reg_440_pp0_iter30_reg;
        n_1_reg_440_pp0_iter32_reg <= n_1_reg_440_pp0_iter31_reg;
        n_1_reg_440_pp0_iter33_reg <= n_1_reg_440_pp0_iter32_reg;
        n_1_reg_440_pp0_iter34_reg <= n_1_reg_440_pp0_iter33_reg;
        n_1_reg_440_pp0_iter35_reg <= n_1_reg_440_pp0_iter34_reg;
        n_1_reg_440_pp0_iter36_reg <= n_1_reg_440_pp0_iter35_reg;
        n_1_reg_440_pp0_iter37_reg <= n_1_reg_440_pp0_iter36_reg;
        n_1_reg_440_pp0_iter3_reg <= n_1_reg_440_pp0_iter2_reg;
        n_1_reg_440_pp0_iter4_reg <= n_1_reg_440_pp0_iter3_reg;
        n_1_reg_440_pp0_iter5_reg <= n_1_reg_440_pp0_iter4_reg;
        n_1_reg_440_pp0_iter6_reg <= n_1_reg_440_pp0_iter5_reg;
        n_1_reg_440_pp0_iter7_reg <= n_1_reg_440_pp0_iter6_reg;
        n_1_reg_440_pp0_iter8_reg <= n_1_reg_440_pp0_iter7_reg;
        n_1_reg_440_pp0_iter9_reg <= n_1_reg_440_pp0_iter8_reg;
        pf_reg_459 <= grp_fu_94_p2;
        trunc_ln23_2_reg_482 <= trunc_ln23_2_fu_222_p1;
        z_4_reg_464 <= bitcast_ln724_fu_151_p1[32'd63];
        z_8_reg_501 <= z_8_fu_379_p3;
        z_reg_469 <= z_fu_202_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln22_reg_445 <= icmp_ln22_fu_119_p2;
        icmp_ln22_reg_445_pp0_iter1_reg <= icmp_ln22_reg_445;
        n_1_reg_440 <= ap_sig_allocacmp_n_1;
        n_1_reg_440_pp0_iter1_reg <= n_1_reg_440;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln22_fu_119_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter37_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) 
    & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_n_1 = 63'd0;
    end else begin
        ap_sig_allocacmp_n_1 = n_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter38 == 1'b1))) begin
        ap_sig_allocacmp_x_load = x_1_fu_405_p2;
    end else begin
        ap_sig_allocacmp_x_load = x_fu_80;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_238_p2 = ($signed(trunc_ln23_2_reg_482) + $signed(11'd2016));

assign and_ln23_1_fu_368_p2 = (xor_ln23_1_fu_362_p2 & icmp_ln23_3_fu_258_p2);

assign and_ln23_2_fu_374_p2 = (icmp_ln23_1_reg_488 & and_ln23_1_fu_368_p2);

assign and_ln23_fu_329_p2 = (xor_ln23_fu_311_p2 & icmp_ln23_2_reg_495);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_346 = ((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_348 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_return = ap_sig_allocacmp_x_load << 64'd2;

assign bitcast_ln724_fu_151_p1 = pf_reg_459;

assign grp_fu_99_p0 = (shl_ln_fu_131_p3 | 64'd1);

assign icmp_ln22_fu_119_p2 = (($signed(zext_ln22_fu_115_p1) < $signed(terms)) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_226_p2 = (($signed(sub_ln23_1_fu_216_p2) > $signed(12'd32)) ? 1'b1 : 1'b0);

assign icmp_ln23_2_fu_232_p2 = ((sub_ln23_1_fu_216_p2 == 12'd32) ? 1'b1 : 1'b0);

assign icmp_ln23_3_fu_258_p2 = ((select_ln23_1_fu_248_p3 < 11'd54) ? 1'b1 : 1'b0);

assign icmp_ln23_4_fu_274_p2 = ((tmp_1_fu_264_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_210_p2 = ((trunc_ln23_fu_154_p1 == 63'd0) ? 1'b1 : 1'b0);

assign n_2_fu_125_p2 = (ap_sig_allocacmp_n_1 + 63'd1);

assign or_ln23_1_fu_345_p2 = (icmp_ln23_reg_476 | icmp_ln23_2_reg_495);

assign or_ln23_2_fu_349_p2 = (or_ln23_1_fu_345_p2 | icmp_ln23_1_reg_488);

assign select_ln23_1_fu_248_p3 = ((icmp_ln23_1_reg_488[0:0] == 1'b1) ? add_ln23_fu_238_p2 : sub_ln23_2_fu_243_p2);

assign select_ln23_fu_321_p3 = ((z_5_fu_316_p2[0:0] == 1'b1) ? 54'd18014398509481983 : 54'd0);

assign sext_ln23_1_fu_307_p1 = $signed(z_3_fu_302_p2);

assign sext_ln23_2_fu_341_p1 = $signed(z_6_fu_334_p3);

assign sext_ln23_fu_255_p1 = z_reg_469;

assign shl_ln_fu_131_p3 = {{ap_sig_allocacmp_n_1}, {1'd0}};

assign sub_ln23_1_fu_216_p2 = (12'd1075 - zext_ln23_fu_176_p1);

assign sub_ln23_2_fu_243_p2 = (11'd32 - trunc_ln23_2_reg_482);

assign sub_ln23_fu_196_p2 = (54'd0 - zext_ln23_1_fu_192_p1);

assign tmp2_fu_166_p4 = {{bitcast_ln724_fu_151_p1[62:52]}};

assign tmp_1_fu_264_p4 = {{select_ln23_1_fu_248_p3[10:6]}};

assign trunc_ln22_fu_390_p1 = n_1_reg_440_pp0_iter37_reg[0:0];

assign trunc_ln23_1_fu_180_p1 = bitcast_ln724_fu_151_p1[51:0];

assign trunc_ln23_2_fu_222_p1 = sub_ln23_1_fu_216_p2[10:0];

assign trunc_ln23_fu_154_p1 = bitcast_ln724_fu_151_p1[62:0];

assign x_1_fu_405_p2 = (z_10_fu_398_p3 + x_fu_80);

assign xor_ln23_1_fu_362_p2 = (or_ln23_1_fu_345_p2 ^ 1'd1);

assign xor_ln23_fu_311_p2 = (icmp_ln23_reg_476 ^ 1'd1);

assign z_10_fu_398_p3 = ((trunc_ln22_fu_390_p1[0:0] == 1'b1) ? z_9_fu_393_p2 : z_8_reg_501);

assign z_1_fu_284_p2 = sext_ln23_fu_255_p1 << zext_ln23_2_fu_280_p1;

assign z_2_fu_290_p3 = ((icmp_ln23_4_fu_274_p2[0:0] == 1'b1) ? z_1_fu_284_p2 : 64'd0);

assign z_3_fu_302_p2 = $signed(z_reg_469) >>> zext_ln23_3_fu_298_p1;

assign z_4_fu_158_p3 = bitcast_ln724_fu_151_p1[32'd63];

assign z_5_fu_316_p2 = (z_4_reg_464 & xor_ln23_fu_311_p2);

assign z_6_fu_334_p3 = ((and_ln23_fu_329_p2[0:0] == 1'b1) ? z_reg_469 : select_ln23_fu_321_p3);

assign z_7_fu_354_p3 = ((or_ln23_2_fu_349_p2[0:0] == 1'b1) ? sext_ln23_2_fu_341_p1 : z_2_fu_290_p3);

assign z_8_fu_379_p3 = ((and_ln23_2_fu_374_p2[0:0] == 1'b1) ? sext_ln23_1_fu_307_p1 : z_7_fu_354_p3);

assign z_9_fu_393_p2 = (64'd0 - z_8_reg_501);

assign z_fu_202_p3 = ((z_4_fu_158_p3[0:0] == 1'b1) ? sub_ln23_fu_196_p2 : zext_ln23_1_fu_192_p1);

assign zext_ln22_fu_115_p1 = ap_sig_allocacmp_n_1;

assign zext_ln23_1_cast_fu_184_p3 = {{1'd1}, {trunc_ln23_1_fu_180_p1}};

assign zext_ln23_1_fu_192_p1 = zext_ln23_1_cast_fu_184_p3;

assign zext_ln23_2_fu_280_p1 = select_ln23_1_fu_248_p3;

assign zext_ln23_3_fu_298_p1 = select_ln23_1_fu_248_p3;

assign zext_ln23_fu_176_p1 = tmp2_fu_166_p4;

endmodule //kernel
