// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/11/2025 14:27:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    carry_select_adder_gpt
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module carry_select_adder_gpt_vlg_sample_tst(
	A,
	B,
	Cin,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  Cin;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or Cin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module carry_select_adder_gpt_vlg_check_tst (
	Co0,
	Co1,
	CoM,
	Cout,
	S,
	So0,
	So1,
	sampler_rx
);
input [1:0] Co0;
input [1:0] Co1;
input [1:0] CoM;
input  Cout;
input [7:0] S;
input [7:0] So0;
input [7:0] So1;
input sampler_rx;

reg [1:0] Co0_expected;
reg [1:0] Co1_expected;
reg [1:0] CoM_expected;
reg  Cout_expected;
reg [7:0] S_expected;
reg [7:0] So0_expected;
reg [7:0] So1_expected;

reg [1:0] Co0_prev;
reg [1:0] Co1_prev;
reg [1:0] CoM_prev;
reg  Cout_prev;
reg [7:0] S_prev;
reg [7:0] So0_prev;
reg [7:0] So1_prev;

reg [1:0] Co0_expected_prev;
reg [1:0] Co1_expected_prev;
reg [1:0] CoM_expected_prev;
reg  Cout_expected_prev;
reg [7:0] S_expected_prev;
reg [7:0] So0_expected_prev;
reg [7:0] So1_expected_prev;

reg [1:0] last_Co0_exp;
reg [1:0] last_Co1_exp;
reg [1:0] last_CoM_exp;
reg  last_Cout_exp;
reg [7:0] last_S_exp;
reg [7:0] last_So0_exp;
reg [7:0] last_So1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	Co0_prev = Co0;
	Co1_prev = Co1;
	CoM_prev = CoM;
	Cout_prev = Cout;
	S_prev = S;
	So0_prev = So0;
	So1_prev = So1;
end

// update expected /o prevs

always @(trigger)
begin
	Co0_expected_prev = Co0_expected;
	Co1_expected_prev = Co1_expected;
	CoM_expected_prev = CoM_expected;
	Cout_expected_prev = Cout_expected;
	S_expected_prev = S_expected;
	So0_expected_prev = So0_expected;
	So1_expected_prev = So1_expected;
end



// expected Cout
initial
begin
	Cout_expected = 1'bX;
end 
// expected S[ 7 ]
initial
begin
	S_expected[7] = 1'bX;
end 
// expected S[ 6 ]
initial
begin
	S_expected[6] = 1'bX;
end 
// expected S[ 5 ]
initial
begin
	S_expected[5] = 1'bX;
end 
// expected S[ 4 ]
initial
begin
	S_expected[4] = 1'bX;
end 
// expected S[ 3 ]
initial
begin
	S_expected[3] = 1'bX;
end 
// expected S[ 2 ]
initial
begin
	S_expected[2] = 1'bX;
end 
// expected S[ 1 ]
initial
begin
	S_expected[1] = 1'bX;
end 
// expected S[ 0 ]
initial
begin
	S_expected[0] = 1'bX;
end 
// expected Co0[ 1 ]
initial
begin
	Co0_expected[1] = 1'bX;
end 
// expected Co0[ 0 ]
initial
begin
	Co0_expected[0] = 1'bX;
end 
// expected Co1[ 1 ]
initial
begin
	Co1_expected[1] = 1'bX;
end 
// expected Co1[ 0 ]
initial
begin
	Co1_expected[0] = 1'bX;
end 
// expected CoM[ 1 ]
initial
begin
	CoM_expected[1] = 1'bX;
end 
// expected CoM[ 0 ]
initial
begin
	CoM_expected[0] = 1'bX;
end 
// expected So1[ 7 ]
initial
begin
	So1_expected[7] = 1'bX;
end 
// expected So1[ 6 ]
initial
begin
	So1_expected[6] = 1'bX;
end 
// expected So1[ 5 ]
initial
begin
	So1_expected[5] = 1'bX;
end 
// expected So1[ 4 ]
initial
begin
	So1_expected[4] = 1'bX;
end 
// expected So1[ 3 ]
initial
begin
	So1_expected[3] = 1'bX;
end 
// expected So1[ 2 ]
initial
begin
	So1_expected[2] = 1'bX;
end 
// expected So1[ 1 ]
initial
begin
	So1_expected[1] = 1'bX;
end 
// expected So1[ 0 ]
initial
begin
	So1_expected[0] = 1'bX;
end 
// expected So0[ 7 ]
initial
begin
	So0_expected[7] = 1'bX;
end 
// expected So0[ 6 ]
initial
begin
	So0_expected[6] = 1'bX;
end 
// expected So0[ 5 ]
initial
begin
	So0_expected[5] = 1'bX;
end 
// expected So0[ 4 ]
initial
begin
	So0_expected[4] = 1'bX;
end 
// expected So0[ 3 ]
initial
begin
	So0_expected[3] = 1'bX;
end 
// expected So0[ 2 ]
initial
begin
	So0_expected[2] = 1'bX;
end 
// expected So0[ 1 ]
initial
begin
	So0_expected[1] = 1'bX;
end 
// expected So0[ 0 ]
initial
begin
	So0_expected[0] = 1'bX;
end 
// generate trigger
always @(Co0_expected or Co0 or Co1_expected or Co1 or CoM_expected or CoM or Cout_expected or Cout or S_expected or S or So0_expected or So0 or So1_expected or So1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Co0 = %b | expected Co1 = %b | expected CoM = %b | expected Cout = %b | expected S = %b | expected So0 = %b | expected So1 = %b | ",Co0_expected_prev,Co1_expected_prev,CoM_expected_prev,Cout_expected_prev,S_expected_prev,So0_expected_prev,So1_expected_prev);
	$display("| real Co0 = %b | real Co1 = %b | real CoM = %b | real Cout = %b | real S = %b | real So0 = %b | real So1 = %b | ",Co0_prev,Co1_prev,CoM_prev,Cout_prev,S_prev,So0_prev,So1_prev);
`endif
	if (
		( Co0_expected_prev[0] !== 1'bx ) && ( Co0_prev[0] !== Co0_expected_prev[0] )
		&& ((Co0_expected_prev[0] !== last_Co0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Co0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Co0_expected_prev);
		$display ("     Real value = %b", Co0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Co0_exp[0] = Co0_expected_prev[0];
	end
	if (
		( Co0_expected_prev[1] !== 1'bx ) && ( Co0_prev[1] !== Co0_expected_prev[1] )
		&& ((Co0_expected_prev[1] !== last_Co0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Co0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Co0_expected_prev);
		$display ("     Real value = %b", Co0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Co0_exp[1] = Co0_expected_prev[1];
	end
	if (
		( Co1_expected_prev[0] !== 1'bx ) && ( Co1_prev[0] !== Co1_expected_prev[0] )
		&& ((Co1_expected_prev[0] !== last_Co1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Co1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Co1_expected_prev);
		$display ("     Real value = %b", Co1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Co1_exp[0] = Co1_expected_prev[0];
	end
	if (
		( Co1_expected_prev[1] !== 1'bx ) && ( Co1_prev[1] !== Co1_expected_prev[1] )
		&& ((Co1_expected_prev[1] !== last_Co1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Co1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Co1_expected_prev);
		$display ("     Real value = %b", Co1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Co1_exp[1] = Co1_expected_prev[1];
	end
	if (
		( CoM_expected_prev[0] !== 1'bx ) && ( CoM_prev[0] !== CoM_expected_prev[0] )
		&& ((CoM_expected_prev[0] !== last_CoM_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CoM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CoM_expected_prev);
		$display ("     Real value = %b", CoM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CoM_exp[0] = CoM_expected_prev[0];
	end
	if (
		( CoM_expected_prev[1] !== 1'bx ) && ( CoM_prev[1] !== CoM_expected_prev[1] )
		&& ((CoM_expected_prev[1] !== last_CoM_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CoM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CoM_expected_prev);
		$display ("     Real value = %b", CoM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CoM_exp[1] = CoM_expected_prev[1];
	end
	if (
		( Cout_expected_prev !== 1'bx ) && ( Cout_prev !== Cout_expected_prev )
		&& ((Cout_expected_prev !== last_Cout_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout_expected_prev);
		$display ("     Real value = %b", Cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Cout_exp = Cout_expected_prev;
	end
	if (
		( S_expected_prev[0] !== 1'bx ) && ( S_prev[0] !== S_expected_prev[0] )
		&& ((S_expected_prev[0] !== last_S_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S_exp[0] = S_expected_prev[0];
	end
	if (
		( S_expected_prev[1] !== 1'bx ) && ( S_prev[1] !== S_expected_prev[1] )
		&& ((S_expected_prev[1] !== last_S_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S_exp[1] = S_expected_prev[1];
	end
	if (
		( S_expected_prev[2] !== 1'bx ) && ( S_prev[2] !== S_expected_prev[2] )
		&& ((S_expected_prev[2] !== last_S_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S_exp[2] = S_expected_prev[2];
	end
	if (
		( S_expected_prev[3] !== 1'bx ) && ( S_prev[3] !== S_expected_prev[3] )
		&& ((S_expected_prev[3] !== last_S_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S_exp[3] = S_expected_prev[3];
	end
	if (
		( S_expected_prev[4] !== 1'bx ) && ( S_prev[4] !== S_expected_prev[4] )
		&& ((S_expected_prev[4] !== last_S_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S_exp[4] = S_expected_prev[4];
	end
	if (
		( S_expected_prev[5] !== 1'bx ) && ( S_prev[5] !== S_expected_prev[5] )
		&& ((S_expected_prev[5] !== last_S_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S_exp[5] = S_expected_prev[5];
	end
	if (
		( S_expected_prev[6] !== 1'bx ) && ( S_prev[6] !== S_expected_prev[6] )
		&& ((S_expected_prev[6] !== last_S_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S_exp[6] = S_expected_prev[6];
	end
	if (
		( S_expected_prev[7] !== 1'bx ) && ( S_prev[7] !== S_expected_prev[7] )
		&& ((S_expected_prev[7] !== last_S_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S_exp[7] = S_expected_prev[7];
	end
	if (
		( So0_expected_prev[0] !== 1'bx ) && ( So0_prev[0] !== So0_expected_prev[0] )
		&& ((So0_expected_prev[0] !== last_So0_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So0_expected_prev);
		$display ("     Real value = %b", So0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_So0_exp[0] = So0_expected_prev[0];
	end
	if (
		( So0_expected_prev[1] !== 1'bx ) && ( So0_prev[1] !== So0_expected_prev[1] )
		&& ((So0_expected_prev[1] !== last_So0_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So0_expected_prev);
		$display ("     Real value = %b", So0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_So0_exp[1] = So0_expected_prev[1];
	end
	if (
		( So0_expected_prev[2] !== 1'bx ) && ( So0_prev[2] !== So0_expected_prev[2] )
		&& ((So0_expected_prev[2] !== last_So0_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So0_expected_prev);
		$display ("     Real value = %b", So0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_So0_exp[2] = So0_expected_prev[2];
	end
	if (
		( So0_expected_prev[3] !== 1'bx ) && ( So0_prev[3] !== So0_expected_prev[3] )
		&& ((So0_expected_prev[3] !== last_So0_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So0_expected_prev);
		$display ("     Real value = %b", So0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_So0_exp[3] = So0_expected_prev[3];
	end
	if (
		( So0_expected_prev[4] !== 1'bx ) && ( So0_prev[4] !== So0_expected_prev[4] )
		&& ((So0_expected_prev[4] !== last_So0_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So0_expected_prev);
		$display ("     Real value = %b", So0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_So0_exp[4] = So0_expected_prev[4];
	end
	if (
		( So0_expected_prev[5] !== 1'bx ) && ( So0_prev[5] !== So0_expected_prev[5] )
		&& ((So0_expected_prev[5] !== last_So0_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So0_expected_prev);
		$display ("     Real value = %b", So0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_So0_exp[5] = So0_expected_prev[5];
	end
	if (
		( So0_expected_prev[6] !== 1'bx ) && ( So0_prev[6] !== So0_expected_prev[6] )
		&& ((So0_expected_prev[6] !== last_So0_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So0_expected_prev);
		$display ("     Real value = %b", So0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_So0_exp[6] = So0_expected_prev[6];
	end
	if (
		( So0_expected_prev[7] !== 1'bx ) && ( So0_prev[7] !== So0_expected_prev[7] )
		&& ((So0_expected_prev[7] !== last_So0_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So0_expected_prev);
		$display ("     Real value = %b", So0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_So0_exp[7] = So0_expected_prev[7];
	end
	if (
		( So1_expected_prev[0] !== 1'bx ) && ( So1_prev[0] !== So1_expected_prev[0] )
		&& ((So1_expected_prev[0] !== last_So1_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So1_expected_prev);
		$display ("     Real value = %b", So1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_So1_exp[0] = So1_expected_prev[0];
	end
	if (
		( So1_expected_prev[1] !== 1'bx ) && ( So1_prev[1] !== So1_expected_prev[1] )
		&& ((So1_expected_prev[1] !== last_So1_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So1_expected_prev);
		$display ("     Real value = %b", So1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_So1_exp[1] = So1_expected_prev[1];
	end
	if (
		( So1_expected_prev[2] !== 1'bx ) && ( So1_prev[2] !== So1_expected_prev[2] )
		&& ((So1_expected_prev[2] !== last_So1_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So1_expected_prev);
		$display ("     Real value = %b", So1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_So1_exp[2] = So1_expected_prev[2];
	end
	if (
		( So1_expected_prev[3] !== 1'bx ) && ( So1_prev[3] !== So1_expected_prev[3] )
		&& ((So1_expected_prev[3] !== last_So1_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So1_expected_prev);
		$display ("     Real value = %b", So1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_So1_exp[3] = So1_expected_prev[3];
	end
	if (
		( So1_expected_prev[4] !== 1'bx ) && ( So1_prev[4] !== So1_expected_prev[4] )
		&& ((So1_expected_prev[4] !== last_So1_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So1_expected_prev);
		$display ("     Real value = %b", So1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_So1_exp[4] = So1_expected_prev[4];
	end
	if (
		( So1_expected_prev[5] !== 1'bx ) && ( So1_prev[5] !== So1_expected_prev[5] )
		&& ((So1_expected_prev[5] !== last_So1_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So1_expected_prev);
		$display ("     Real value = %b", So1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_So1_exp[5] = So1_expected_prev[5];
	end
	if (
		( So1_expected_prev[6] !== 1'bx ) && ( So1_prev[6] !== So1_expected_prev[6] )
		&& ((So1_expected_prev[6] !== last_So1_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So1_expected_prev);
		$display ("     Real value = %b", So1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_So1_exp[6] = So1_expected_prev[6];
	end
	if (
		( So1_expected_prev[7] !== 1'bx ) && ( So1_prev[7] !== So1_expected_prev[7] )
		&& ((So1_expected_prev[7] !== last_So1_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So1_expected_prev);
		$display ("     Real value = %b", So1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_So1_exp[7] = So1_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module carry_select_adder_gpt_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg Cin;
// wires                                               
wire [1:0] Co0;
wire [1:0] Co1;
wire [1:0] CoM;
wire Cout;
wire [7:0] S;
wire [7:0] So0;
wire [7:0] So1;

wire sampler;                             

// assign statements (if any)                          
carry_select_adder_gpt i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Cin(Cin),
	.Co0(Co0),
	.Co1(Co1),
	.CoM(CoM),
	.Cout(Cout),
	.S(S),
	.So0(So0),
	.So1(So1)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
	A[7] = #600000 1'b1;
	A[7] = #200000 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
	A[6] = #200000 1'b1;
	A[6] = #200000 1'b0;
	A[6] = #200000 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
	A[5] = #600000 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #400000 1'b1;
	A[4] = #200000 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #800000 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	A[2] = #200000 1'b1;
	A[2] = #400000 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #200000 1'b1;
	A[1] = #200000 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b1;
	B[7] = #100000 1'b0;
	B[7] = #200000 1'b1;
	B[7] = #200000 1'b0;
	B[7] = #100000 1'b1;
	B[7] = #100000 1'b0;
	B[7] = #100000 1'b1;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
	B[6] = #100000 1'b1;
	B[6] = #200000 1'b0;
	B[6] = #100000 1'b1;
	B[6] = #400000 1'b0;
	B[6] = #100000 1'b1;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
	B[5] = #100000 1'b1;
	B[5] = #100000 1'b0;
	B[5] = #100000 1'b1;
	B[5] = #200000 1'b0;
	B[5] = #200000 1'b1;
	B[5] = #100000 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
	B[4] = #100000 1'b1;
	B[4] = #200000 1'b0;
	B[4] = #100000 1'b1;
	B[4] = #100000 1'b0;
	B[4] = #200000 1'b1;
	B[4] = #100000 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
	B[3] = #500000 1'b0;
	B[3] = #100000 1'b1;
	B[3] = #100000 1'b0;
	B[3] = #200000 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
	B[2] = #200000 1'b0;
	B[2] = #500000 1'b1;
	B[2] = #200000 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
	B[1] = #200000 1'b0;
	B[1] = #100000 1'b1;
	B[1] = #100000 1'b0;
	B[1] = #100000 1'b1;
	B[1] = #200000 1'b0;
	B[1] = #100000 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
	B[0] = #100000 1'b1;
	B[0] = #100000 1'b0;
	B[0] = #100000 1'b1;
	B[0] = #100000 1'b0;
	B[0] = #100000 1'b1;
	B[0] = #200000 1'b0;
	B[0] = #100000 1'b1;
	B[0] = #100000 1'b0;
end 

// Cin
initial
begin
	Cin = 1'b0;
end 

carry_select_adder_gpt_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.Cin(Cin),
	.sampler_tx(sampler)
);

carry_select_adder_gpt_vlg_check_tst tb_out(
	.Co0(Co0),
	.Co1(Co1),
	.CoM(CoM),
	.Cout(Cout),
	.S(S),
	.So0(So0),
	.So1(So1),
	.sampler_rx(sampler)
);
endmodule

