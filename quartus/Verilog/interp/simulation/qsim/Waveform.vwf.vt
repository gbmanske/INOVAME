// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2024 16:46:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    interp
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module interp_vlg_sample_tst(
	P0,
	P1,
	P2,
	P3,
	sampler_tx
);
input [7:0] P0;
input [7:0] P1;
input [7:0] P2;
input [7:0] P3;
output sampler_tx;

reg sample;
time current_time;
always @(P0 or P1 or P2 or P3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module interp_vlg_check_tst (
	Interpolated,
	aux,
	aux2,
	aux3,
	sampler_rx
);
input [7:0] Interpolated;
input [17:0] aux;
input [9:0] aux2;
input [17:0] aux3;
input sampler_rx;

reg [7:0] Interpolated_expected;
reg [17:0] aux_expected;
reg [9:0] aux2_expected;
reg [17:0] aux3_expected;

reg [7:0] Interpolated_prev;
reg [17:0] aux_prev;
reg [9:0] aux2_prev;
reg [17:0] aux3_prev;

reg [7:0] Interpolated_expected_prev;

reg [7:0] last_Interpolated_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Interpolated_prev = Interpolated;
	aux_prev = aux;
	aux2_prev = aux2;
	aux3_prev = aux3;
end

// update expected /o prevs

always @(trigger)
begin
	Interpolated_expected_prev = Interpolated_expected;
end


// expected Interpolated[ 7 ]
initial
begin
	Interpolated_expected[7] = 1'bX;
end 
// expected Interpolated[ 6 ]
initial
begin
	Interpolated_expected[6] = 1'bX;
end 
// expected Interpolated[ 5 ]
initial
begin
	Interpolated_expected[5] = 1'bX;
end 
// expected Interpolated[ 4 ]
initial
begin
	Interpolated_expected[4] = 1'bX;
end 
// expected Interpolated[ 3 ]
initial
begin
	Interpolated_expected[3] = 1'bX;
end 
// expected Interpolated[ 2 ]
initial
begin
	Interpolated_expected[2] = 1'bX;
end 
// expected Interpolated[ 1 ]
initial
begin
	Interpolated_expected[1] = 1'bX;
end 
// expected Interpolated[ 0 ]
initial
begin
	Interpolated_expected[0] = 1'bX;
end 
// generate trigger
always @(Interpolated_expected or Interpolated or aux_expected or aux or aux2_expected or aux2 or aux3_expected or aux3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Interpolated = %b | expected aux = %b | expected aux2 = %b | expected aux3 = %b | ",Interpolated_expected_prev,aux_expected_prev,aux2_expected_prev,aux3_expected_prev);
	$display("| real Interpolated = %b | real aux = %b | real aux2 = %b | real aux3 = %b | ",Interpolated_prev,aux_prev,aux2_prev,aux3_prev);
`endif
	if (
		( Interpolated_expected_prev[0] !== 1'bx ) && ( Interpolated_prev[0] !== Interpolated_expected_prev[0] )
		&& ((Interpolated_expected_prev[0] !== last_Interpolated_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Interpolated[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Interpolated_expected_prev);
		$display ("     Real value = %b", Interpolated_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Interpolated_exp[0] = Interpolated_expected_prev[0];
	end
	if (
		( Interpolated_expected_prev[1] !== 1'bx ) && ( Interpolated_prev[1] !== Interpolated_expected_prev[1] )
		&& ((Interpolated_expected_prev[1] !== last_Interpolated_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Interpolated[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Interpolated_expected_prev);
		$display ("     Real value = %b", Interpolated_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Interpolated_exp[1] = Interpolated_expected_prev[1];
	end
	if (
		( Interpolated_expected_prev[2] !== 1'bx ) && ( Interpolated_prev[2] !== Interpolated_expected_prev[2] )
		&& ((Interpolated_expected_prev[2] !== last_Interpolated_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Interpolated[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Interpolated_expected_prev);
		$display ("     Real value = %b", Interpolated_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Interpolated_exp[2] = Interpolated_expected_prev[2];
	end
	if (
		( Interpolated_expected_prev[3] !== 1'bx ) && ( Interpolated_prev[3] !== Interpolated_expected_prev[3] )
		&& ((Interpolated_expected_prev[3] !== last_Interpolated_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Interpolated[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Interpolated_expected_prev);
		$display ("     Real value = %b", Interpolated_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Interpolated_exp[3] = Interpolated_expected_prev[3];
	end
	if (
		( Interpolated_expected_prev[4] !== 1'bx ) && ( Interpolated_prev[4] !== Interpolated_expected_prev[4] )
		&& ((Interpolated_expected_prev[4] !== last_Interpolated_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Interpolated[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Interpolated_expected_prev);
		$display ("     Real value = %b", Interpolated_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Interpolated_exp[4] = Interpolated_expected_prev[4];
	end
	if (
		( Interpolated_expected_prev[5] !== 1'bx ) && ( Interpolated_prev[5] !== Interpolated_expected_prev[5] )
		&& ((Interpolated_expected_prev[5] !== last_Interpolated_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Interpolated[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Interpolated_expected_prev);
		$display ("     Real value = %b", Interpolated_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Interpolated_exp[5] = Interpolated_expected_prev[5];
	end
	if (
		( Interpolated_expected_prev[6] !== 1'bx ) && ( Interpolated_prev[6] !== Interpolated_expected_prev[6] )
		&& ((Interpolated_expected_prev[6] !== last_Interpolated_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Interpolated[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Interpolated_expected_prev);
		$display ("     Real value = %b", Interpolated_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Interpolated_exp[6] = Interpolated_expected_prev[6];
	end
	if (
		( Interpolated_expected_prev[7] !== 1'bx ) && ( Interpolated_prev[7] !== Interpolated_expected_prev[7] )
		&& ((Interpolated_expected_prev[7] !== last_Interpolated_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Interpolated[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Interpolated_expected_prev);
		$display ("     Real value = %b", Interpolated_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Interpolated_exp[7] = Interpolated_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module interp_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] P0;
reg [7:0] P1;
reg [7:0] P2;
reg [7:0] P3;
// wires                                               
wire [7:0] Interpolated;
wire [17:0] aux;
wire [9:0] aux2;
wire [17:0] aux3;

wire sampler;                             

// assign statements (if any)                          
interp i1 (
// port map - connection between master ports and signals/registers   
	.Interpolated(Interpolated),
	.P0(P0),
	.P1(P1),
	.P2(P2),
	.P3(P3),
	.aux(aux),
	.aux2(aux2),
	.aux3(aux3)
);
// P0[ 7 ]
initial
begin
	P0[7] = 1'b0;
end 
// P0[ 6 ]
initial
begin
	P0[6] = 1'b0;
end 
// P0[ 5 ]
initial
begin
	P0[5] = 1'b0;
end 
// P0[ 4 ]
initial
begin
	P0[4] = 1'b0;
end 
// P0[ 3 ]
initial
begin
	P0[3] = 1'b1;
end 
// P0[ 2 ]
initial
begin
	P0[2] = 1'b0;
end 
// P0[ 1 ]
initial
begin
	P0[1] = 1'b1;
end 
// P0[ 0 ]
initial
begin
	P0[0] = 1'b0;
end 
// P1[ 7 ]
initial
begin
	P1[7] = 1'b0;
end 
// P1[ 6 ]
initial
begin
	P1[6] = 1'b0;
end 
// P1[ 5 ]
initial
begin
	P1[5] = 1'b0;
end 
// P1[ 4 ]
initial
begin
	P1[4] = 1'b1;
end 
// P1[ 3 ]
initial
begin
	P1[3] = 1'b0;
end 
// P1[ 2 ]
initial
begin
	P1[2] = 1'b1;
end 
// P1[ 1 ]
initial
begin
	P1[1] = 1'b0;
end 
// P1[ 0 ]
initial
begin
	P1[0] = 1'b0;
end 
// P2[ 7 ]
initial
begin
	P2[7] = 1'b0;
end 
// P2[ 6 ]
initial
begin
	P2[6] = 1'b0;
end 
// P2[ 5 ]
initial
begin
	P2[5] = 1'b0;
end 
// P2[ 4 ]
initial
begin
	P2[4] = 1'b0;
end 
// P2[ 3 ]
initial
begin
	P2[3] = 1'b1;
end 
// P2[ 2 ]
initial
begin
	P2[2] = 1'b0;
end 
// P2[ 1 ]
initial
begin
	P2[1] = 1'b1;
end 
// P2[ 0 ]
initial
begin
	P2[0] = 1'b0;
end 
// P3[ 7 ]
initial
begin
	P3[7] = 1'b0;
end 
// P3[ 6 ]
initial
begin
	P3[6] = 1'b0;
end 
// P3[ 5 ]
initial
begin
	P3[5] = 1'b0;
end 
// P3[ 4 ]
initial
begin
	P3[4] = 1'b0;
end 
// P3[ 3 ]
initial
begin
	P3[3] = 1'b1;
end 
// P3[ 2 ]
initial
begin
	P3[2] = 1'b0;
end 
// P3[ 1 ]
initial
begin
	P3[1] = 1'b1;
end 
// P3[ 0 ]
initial
begin
	P3[0] = 1'b0;
end 

interp_vlg_sample_tst tb_sample (
	.P0(P0),
	.P1(P1),
	.P2(P2),
	.P3(P3),
	.sampler_tx(sampler)
);

interp_vlg_check_tst tb_out(
	.Interpolated(Interpolated),
	.aux(aux),
	.aux2(aux2),
	.aux3(aux3),
	.sampler_rx(sampler)
);
endmodule

