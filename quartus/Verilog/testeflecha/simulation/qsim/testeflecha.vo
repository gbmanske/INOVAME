// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 32-bit"
// VERSION "Version 13.1.0 Build 162 10/23/2013 SJ Web Edition"

// DATE "12/02/2024 14:06:37"

// 
// Device: Altera EP4CGX15BF14C6 Package FBGA169
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module testeflecha (
	clk,
	d,
	q1,
	q2,
	q3);
input 	clk;
input 	d;
output 	q1;
output 	q2;
output 	q3;

// Design Ports Information
// q1	=>  Location: PIN_M4,	 I/O Standard: 2.5 V,	 Current Strength: Default
// q2	=>  Location: PIN_N6,	 I/O Standard: 2.5 V,	 Current Strength: Default
// q3	=>  Location: PIN_L4,	 I/O Standard: 2.5 V,	 Current Strength: Default
// d	=>  Location: PIN_N4,	 I/O Standard: 2.5 V,	 Current Strength: Default
// clk	=>  Location: PIN_J7,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \q1~output_o ;
wire \q2~output_o ;
wire \q3~output_o ;
wire \clk~input_o ;
wire \clk~inputclkctrl_outclk ;
wire \d~input_o ;
wire \q1~reg0feeder_combout ;
wire \q1~reg0_q ;
wire \q2~reg0feeder_combout ;
wire \q2~reg0_q ;
wire \q3~reg0feeder_combout ;
wire \q3~reg0_q ;


// Location: IOOBUF_X8_Y0_N2
cycloneiv_io_obuf \q1~output (
	.i(\q1~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\q1~output_o ),
	.obar());
// synopsys translate_off
defparam \q1~output .bus_hold = "false";
defparam \q1~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X12_Y0_N2
cycloneiv_io_obuf \q2~output (
	.i(\q2~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\q2~output_o ),
	.obar());
// synopsys translate_off
defparam \q2~output .bus_hold = "false";
defparam \q2~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X8_Y0_N9
cycloneiv_io_obuf \q3~output (
	.i(\q3~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\q3~output_o ),
	.obar());
// synopsys translate_off
defparam \q3~output .bus_hold = "false";
defparam \q3~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X16_Y0_N15
cycloneiv_io_ibuf \clk~input (
	.i(clk),
	.ibar(gnd),
	.o(\clk~input_o ));
// synopsys translate_off
defparam \clk~input .bus_hold = "false";
defparam \clk~input .simulate_z_as = "z";
// synopsys translate_on

// Location: CLKCTRL_G17
cycloneiv_clkctrl \clk~inputclkctrl (
	.ena(vcc),
	.inclk({vcc,vcc,vcc,\clk~input_o }),
	.clkselect(2'b00),
	.devclrn(devclrn),
	.devpor(devpor),
	.outclk(\clk~inputclkctrl_outclk ));
// synopsys translate_off
defparam \clk~inputclkctrl .clock_type = "global clock";
defparam \clk~inputclkctrl .ena_register_mode = "none";
// synopsys translate_on

// Location: IOIBUF_X10_Y0_N8
cycloneiv_io_ibuf \d~input (
	.i(d),
	.ibar(gnd),
	.o(\d~input_o ));
// synopsys translate_off
defparam \d~input .bus_hold = "false";
defparam \d~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X9_Y1_N28
cycloneiv_lcell_comb \q1~reg0feeder (
// Equation(s):
// \q1~reg0feeder_combout  = \d~input_o 

	.dataa(gnd),
	.datab(gnd),
	.datac(gnd),
	.datad(\d~input_o ),
	.cin(gnd),
	.combout(\q1~reg0feeder_combout ),
	.cout());
// synopsys translate_off
defparam \q1~reg0feeder .lut_mask = 16'hFF00;
defparam \q1~reg0feeder .sum_lutc_input = "datac";
// synopsys translate_on

// Location: FF_X9_Y1_N29
dffeas \q1~reg0 (
	.clk(\clk~inputclkctrl_outclk ),
	.d(\q1~reg0feeder_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\q1~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \q1~reg0 .is_wysiwyg = "true";
defparam \q1~reg0 .power_up = "low";
// synopsys translate_on

// Location: LCCOMB_X9_Y1_N18
cycloneiv_lcell_comb \q2~reg0feeder (
// Equation(s):
// \q2~reg0feeder_combout  = \q1~reg0_q 

	.dataa(gnd),
	.datab(gnd),
	.datac(gnd),
	.datad(\q1~reg0_q ),
	.cin(gnd),
	.combout(\q2~reg0feeder_combout ),
	.cout());
// synopsys translate_off
defparam \q2~reg0feeder .lut_mask = 16'hFF00;
defparam \q2~reg0feeder .sum_lutc_input = "datac";
// synopsys translate_on

// Location: FF_X9_Y1_N19
dffeas \q2~reg0 (
	.clk(\clk~inputclkctrl_outclk ),
	.d(\q2~reg0feeder_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\q2~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \q2~reg0 .is_wysiwyg = "true";
defparam \q2~reg0 .power_up = "low";
// synopsys translate_on

// Location: LCCOMB_X9_Y1_N4
cycloneiv_lcell_comb \q3~reg0feeder (
// Equation(s):
// \q3~reg0feeder_combout  = \q1~reg0_q 

	.dataa(gnd),
	.datab(gnd),
	.datac(gnd),
	.datad(\q1~reg0_q ),
	.cin(gnd),
	.combout(\q3~reg0feeder_combout ),
	.cout());
// synopsys translate_off
defparam \q3~reg0feeder .lut_mask = 16'hFF00;
defparam \q3~reg0feeder .sum_lutc_input = "datac";
// synopsys translate_on

// Location: FF_X9_Y1_N5
dffeas \q3~reg0 (
	.clk(\clk~inputclkctrl_outclk ),
	.d(\q3~reg0feeder_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\q3~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \q3~reg0 .is_wysiwyg = "true";
defparam \q3~reg0 .power_up = "low";
// synopsys translate_on

assign q1 = \q1~output_o ;

assign q2 = \q2~output_o ;

assign q3 = \q3~output_o ;

endmodule
