// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/25/2024 16:42:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sum_difabs
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sum_difabs_vlg_sample_tst(
	a00,
	a01,
	a10,
	a11,
	b00,
	b01,
	b10,
	b11,
	sampler_tx
);
input [7:0] a00;
input [7:0] a01;
input [7:0] a10;
input [7:0] a11;
input [7:0] b00;
input [7:0] b01;
input [7:0] b10;
input [7:0] b11;
output sampler_tx;

reg sample;
time current_time;
always @(a00 or a01 or a10 or a11 or b00 or b01 or b10 or b11)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sum_difabs_vlg_check_tst (
	sad,
	sampler_rx
);
input [9:0] sad;
input sampler_rx;

reg [9:0] sad_expected;

reg [9:0] sad_prev;

reg [9:0] sad_expected_prev;

reg [9:0] last_sad_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	sad_prev = sad;
end

// update expected /o prevs

always @(trigger)
begin
	sad_expected_prev = sad_expected;
end


// expected sad[ 9 ]
initial
begin
	sad_expected[9] = 1'bX;
	sad_expected[9] = #500000 1'b1;
end 
// expected sad[ 8 ]
initial
begin
	sad_expected[8] = 1'bX;
	sad_expected[8] = #500000 1'b1;
end 
// expected sad[ 7 ]
initial
begin
	sad_expected[7] = 1'bX;
	sad_expected[7] = #500000 1'b1;
end 
// expected sad[ 6 ]
initial
begin
	sad_expected[6] = 1'bX;
	sad_expected[6] = #500000 1'b1;
end 
// expected sad[ 5 ]
initial
begin
	sad_expected[5] = 1'bX;
	sad_expected[5] = #500000 1'b1;
end 
// expected sad[ 4 ]
initial
begin
	sad_expected[4] = 1'bX;
	sad_expected[4] = #500000 1'b1;
end 
// expected sad[ 3 ]
initial
begin
	sad_expected[3] = 1'bX;
	sad_expected[3] = #500000 1'b1;
end 
// expected sad[ 2 ]
initial
begin
	sad_expected[2] = 1'bX;
	sad_expected[2] = #500000 1'b1;
end 
// expected sad[ 1 ]
initial
begin
	sad_expected[1] = 1'bX;
	sad_expected[1] = #500000 1'b1;
end 
// expected sad[ 0 ]
initial
begin
	sad_expected[0] = 1'bX;
	sad_expected[0] = #500000 1'b1;
end 
// generate trigger
always @(sad_expected or sad)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected sad = %b | ",sad_expected_prev);
	$display("| real sad = %b | ",sad_prev);
`endif
	if (
		( sad_expected_prev[0] !== 1'bx ) && ( sad_prev[0] !== sad_expected_prev[0] )
		&& ((sad_expected_prev[0] !== last_sad_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sad_exp[0] = sad_expected_prev[0];
	end
	if (
		( sad_expected_prev[1] !== 1'bx ) && ( sad_prev[1] !== sad_expected_prev[1] )
		&& ((sad_expected_prev[1] !== last_sad_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sad_exp[1] = sad_expected_prev[1];
	end
	if (
		( sad_expected_prev[2] !== 1'bx ) && ( sad_prev[2] !== sad_expected_prev[2] )
		&& ((sad_expected_prev[2] !== last_sad_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sad_exp[2] = sad_expected_prev[2];
	end
	if (
		( sad_expected_prev[3] !== 1'bx ) && ( sad_prev[3] !== sad_expected_prev[3] )
		&& ((sad_expected_prev[3] !== last_sad_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sad_exp[3] = sad_expected_prev[3];
	end
	if (
		( sad_expected_prev[4] !== 1'bx ) && ( sad_prev[4] !== sad_expected_prev[4] )
		&& ((sad_expected_prev[4] !== last_sad_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sad_exp[4] = sad_expected_prev[4];
	end
	if (
		( sad_expected_prev[5] !== 1'bx ) && ( sad_prev[5] !== sad_expected_prev[5] )
		&& ((sad_expected_prev[5] !== last_sad_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sad_exp[5] = sad_expected_prev[5];
	end
	if (
		( sad_expected_prev[6] !== 1'bx ) && ( sad_prev[6] !== sad_expected_prev[6] )
		&& ((sad_expected_prev[6] !== last_sad_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sad_exp[6] = sad_expected_prev[6];
	end
	if (
		( sad_expected_prev[7] !== 1'bx ) && ( sad_prev[7] !== sad_expected_prev[7] )
		&& ((sad_expected_prev[7] !== last_sad_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sad_exp[7] = sad_expected_prev[7];
	end
	if (
		( sad_expected_prev[8] !== 1'bx ) && ( sad_prev[8] !== sad_expected_prev[8] )
		&& ((sad_expected_prev[8] !== last_sad_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sad_exp[8] = sad_expected_prev[8];
	end
	if (
		( sad_expected_prev[9] !== 1'bx ) && ( sad_prev[9] !== sad_expected_prev[9] )
		&& ((sad_expected_prev[9] !== last_sad_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sad_exp[9] = sad_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sum_difabs_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] a00;
reg [7:0] a01;
reg [7:0] a10;
reg [7:0] a11;
reg [7:0] b00;
reg [7:0] b01;
reg [7:0] b10;
reg [7:0] b11;
// wires                                               
wire [9:0] sad;

wire sampler;                             

// assign statements (if any)                          
sum_difabs i1 (
// port map - connection between master ports and signals/registers   
	.a00(a00),
	.a01(a01),
	.a10(a10),
	.a11(a11),
	.b00(b00),
	.b01(b01),
	.b10(b10),
	.b11(b11),
	.sad(sad)
);
// a00[ 7 ]
initial
begin
	a00[7] = 1'b1;
	a00[7] = #500000 1'b0;
	a00[7] = #490000 1'b1;
end 
// a00[ 6 ]
initial
begin
	a00[6] = 1'b1;
	a00[6] = #500000 1'b0;
	a00[6] = #490000 1'b1;
end 
// a00[ 5 ]
initial
begin
	a00[5] = 1'b1;
	a00[5] = #500000 1'b0;
	a00[5] = #490000 1'b1;
end 
// a00[ 4 ]
initial
begin
	a00[4] = 1'b1;
	a00[4] = #500000 1'b0;
	a00[4] = #490000 1'b1;
end 
// a00[ 3 ]
initial
begin
	a00[3] = 1'b1;
	a00[3] = #500000 1'b0;
	a00[3] = #490000 1'b1;
end 
// a00[ 2 ]
initial
begin
	a00[2] = 1'b1;
	a00[2] = #500000 1'b0;
	a00[2] = #490000 1'b1;
end 
// a00[ 1 ]
initial
begin
	a00[1] = 1'b1;
	a00[1] = #500000 1'b0;
	a00[1] = #490000 1'b1;
end 
// a00[ 0 ]
initial
begin
	a00[0] = 1'b1;
	a00[0] = #500000 1'b0;
	a00[0] = #490000 1'b1;
end 
// a01[ 7 ]
initial
begin
	a01[7] = 1'b1;
	a01[7] = #500000 1'b0;
	a01[7] = #490000 1'b1;
end 
// a01[ 6 ]
initial
begin
	a01[6] = 1'b1;
	a01[6] = #500000 1'b0;
	a01[6] = #490000 1'b1;
end 
// a01[ 5 ]
initial
begin
	a01[5] = 1'b1;
	a01[5] = #500000 1'b0;
	a01[5] = #490000 1'b1;
end 
// a01[ 4 ]
initial
begin
	a01[4] = 1'b1;
	a01[4] = #500000 1'b0;
	a01[4] = #490000 1'b1;
end 
// a01[ 3 ]
initial
begin
	a01[3] = 1'b1;
	a01[3] = #500000 1'b0;
	a01[3] = #490000 1'b1;
end 
// a01[ 2 ]
initial
begin
	a01[2] = 1'b1;
	a01[2] = #500000 1'b0;
	a01[2] = #490000 1'b1;
end 
// a01[ 1 ]
initial
begin
	a01[1] = 1'b1;
	a01[1] = #500000 1'b0;
	a01[1] = #490000 1'b1;
end 
// a01[ 0 ]
initial
begin
	a01[0] = 1'b1;
	a01[0] = #500000 1'b0;
	a01[0] = #490000 1'b1;
end 
// a10[ 7 ]
initial
begin
	a10[7] = 1'b1;
	a10[7] = #500000 1'b0;
	a10[7] = #490000 1'b1;
end 
// a10[ 6 ]
initial
begin
	a10[6] = 1'b1;
	a10[6] = #500000 1'b0;
	a10[6] = #490000 1'b1;
end 
// a10[ 5 ]
initial
begin
	a10[5] = 1'b1;
	a10[5] = #500000 1'b0;
	a10[5] = #490000 1'b1;
end 
// a10[ 4 ]
initial
begin
	a10[4] = 1'b1;
	a10[4] = #500000 1'b0;
	a10[4] = #490000 1'b1;
end 
// a10[ 3 ]
initial
begin
	a10[3] = 1'b1;
	a10[3] = #500000 1'b0;
	a10[3] = #490000 1'b1;
end 
// a10[ 2 ]
initial
begin
	a10[2] = 1'b1;
	a10[2] = #500000 1'b0;
	a10[2] = #490000 1'b1;
end 
// a10[ 1 ]
initial
begin
	a10[1] = 1'b1;
	a10[1] = #500000 1'b0;
	a10[1] = #490000 1'b1;
end 
// a10[ 0 ]
initial
begin
	a10[0] = 1'b1;
	a10[0] = #500000 1'b0;
	a10[0] = #490000 1'b1;
end 
// a11[ 7 ]
initial
begin
	a11[7] = 1'b1;
	a11[7] = #500000 1'b0;
	a11[7] = #490000 1'b1;
end 
// a11[ 6 ]
initial
begin
	a11[6] = 1'b1;
	a11[6] = #500000 1'b0;
	a11[6] = #490000 1'b1;
end 
// a11[ 5 ]
initial
begin
	a11[5] = 1'b1;
	a11[5] = #500000 1'b0;
	a11[5] = #490000 1'b1;
end 
// a11[ 4 ]
initial
begin
	a11[4] = 1'b1;
	a11[4] = #500000 1'b0;
	a11[4] = #490000 1'b1;
end 
// a11[ 3 ]
initial
begin
	a11[3] = 1'b1;
	a11[3] = #500000 1'b0;
	a11[3] = #490000 1'b1;
end 
// a11[ 2 ]
initial
begin
	a11[2] = 1'b1;
	a11[2] = #500000 1'b0;
	a11[2] = #490000 1'b1;
end 
// a11[ 1 ]
initial
begin
	a11[1] = 1'b1;
	a11[1] = #500000 1'b0;
	a11[1] = #490000 1'b1;
end 
// a11[ 0 ]
initial
begin
	a11[0] = 1'b1;
	a11[0] = #500000 1'b0;
	a11[0] = #490000 1'b1;
end 
// b00[ 7 ]
initial
begin
	b00[7] = 1'b0;
	b00[7] = #500000 1'b1;
end 
// b00[ 6 ]
initial
begin
	b00[6] = 1'b0;
	b00[6] = #500000 1'b1;
end 
// b00[ 5 ]
initial
begin
	b00[5] = 1'b0;
	b00[5] = #500000 1'b1;
end 
// b00[ 4 ]
initial
begin
	b00[4] = 1'b0;
	b00[4] = #500000 1'b1;
end 
// b00[ 3 ]
initial
begin
	b00[3] = 1'b0;
	b00[3] = #500000 1'b1;
end 
// b00[ 2 ]
initial
begin
	b00[2] = 1'b0;
	b00[2] = #500000 1'b1;
end 
// b00[ 1 ]
initial
begin
	b00[1] = 1'b0;
	b00[1] = #500000 1'b1;
end 
// b00[ 0 ]
initial
begin
	b00[0] = 1'b0;
	b00[0] = #500000 1'b1;
end 
// b01[ 7 ]
initial
begin
	b01[7] = 1'b0;
	b01[7] = #500000 1'b1;
end 
// b01[ 6 ]
initial
begin
	b01[6] = 1'b0;
	b01[6] = #500000 1'b1;
end 
// b01[ 5 ]
initial
begin
	b01[5] = 1'b0;
	b01[5] = #500000 1'b1;
end 
// b01[ 4 ]
initial
begin
	b01[4] = 1'b0;
	b01[4] = #500000 1'b1;
end 
// b01[ 3 ]
initial
begin
	b01[3] = 1'b0;
	b01[3] = #500000 1'b1;
end 
// b01[ 2 ]
initial
begin
	b01[2] = 1'b0;
	b01[2] = #500000 1'b1;
end 
// b01[ 1 ]
initial
begin
	b01[1] = 1'b0;
	b01[1] = #500000 1'b1;
end 
// b01[ 0 ]
initial
begin
	b01[0] = 1'b0;
	b01[0] = #500000 1'b1;
end 
// b10[ 7 ]
initial
begin
	b10[7] = 1'b0;
	b10[7] = #500000 1'b1;
end 
// b10[ 6 ]
initial
begin
	b10[6] = 1'b0;
	b10[6] = #500000 1'b1;
end 
// b10[ 5 ]
initial
begin
	b10[5] = 1'b0;
	b10[5] = #500000 1'b1;
end 
// b10[ 4 ]
initial
begin
	b10[4] = 1'b0;
	b10[4] = #500000 1'b1;
end 
// b10[ 3 ]
initial
begin
	b10[3] = 1'b0;
	b10[3] = #500000 1'b1;
end 
// b10[ 2 ]
initial
begin
	b10[2] = 1'b0;
	b10[2] = #500000 1'b1;
end 
// b10[ 1 ]
initial
begin
	b10[1] = 1'b0;
	b10[1] = #500000 1'b1;
end 
// b10[ 0 ]
initial
begin
	b10[0] = 1'b0;
	b10[0] = #500000 1'b1;
end 
// b11[ 7 ]
initial
begin
	b11[7] = 1'b0;
	b11[7] = #500000 1'b1;
end 
// b11[ 6 ]
initial
begin
	b11[6] = 1'b0;
	b11[6] = #500000 1'b1;
end 
// b11[ 5 ]
initial
begin
	b11[5] = 1'b0;
	b11[5] = #500000 1'b1;
end 
// b11[ 4 ]
initial
begin
	b11[4] = 1'b0;
	b11[4] = #500000 1'b1;
end 
// b11[ 3 ]
initial
begin
	b11[3] = 1'b0;
	b11[3] = #500000 1'b1;
end 
// b11[ 2 ]
initial
begin
	b11[2] = 1'b0;
	b11[2] = #500000 1'b1;
end 
// b11[ 1 ]
initial
begin
	b11[1] = 1'b0;
	b11[1] = #500000 1'b1;
end 
// b11[ 0 ]
initial
begin
	b11[0] = 1'b0;
	b11[0] = #500000 1'b1;
end 

sum_difabs_vlg_sample_tst tb_sample (
	.a00(a00),
	.a01(a01),
	.a10(a10),
	.a11(a11),
	.b00(b00),
	.b01(b01),
	.b10(b10),
	.b11(b11),
	.sampler_tx(sampler)
);

sum_difabs_vlg_check_tst tb_out(
	.sad(sad),
	.sampler_rx(sampler)
);
endmodule

