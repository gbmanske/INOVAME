// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/02/2024 13:41:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ContDe1_1always
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ContDe1_1always_vlg_sample_tst(
	A,
	clk,
	reset,
	start,
	sampler_tx
);
input [15:0] A;
input  clk;
input  reset;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(A or clk or reset or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ContDe1_1always_vlg_check_tst (
	est,
	pronto,
	resultado,
	sampler_rx
);
input [1:0] est;
input  pronto;
input [4:0] resultado;
input sampler_rx;

reg [1:0] est_expected;
reg  pronto_expected;
reg [4:0] resultado_expected;

reg [1:0] est_prev;
reg  pronto_prev;
reg [4:0] resultado_prev;

reg [1:0] est_expected_prev;
reg  pronto_expected_prev;
reg [4:0] resultado_expected_prev;

reg [1:0] last_est_exp;
reg  last_pronto_exp;
reg [4:0] last_resultado_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	est_prev = est;
	pronto_prev = pronto;
	resultado_prev = resultado;
end

// update expected /o prevs

always @(trigger)
begin
	est_expected_prev = est_expected;
	pronto_expected_prev = pronto_expected;
	resultado_expected_prev = resultado_expected;
end


// expected resultado[ 4 ]
initial
begin
	resultado_expected[4] = 1'bX;
end 
// expected resultado[ 3 ]
initial
begin
	resultado_expected[3] = 1'bX;
end 
// expected resultado[ 2 ]
initial
begin
	resultado_expected[2] = 1'bX;
end 
// expected resultado[ 1 ]
initial
begin
	resultado_expected[1] = 1'bX;
end 
// expected resultado[ 0 ]
initial
begin
	resultado_expected[0] = 1'bX;
end 

// expected pronto
initial
begin
	pronto_expected = 1'bX;
end 
// expected est[ 1 ]
initial
begin
	est_expected[1] = 1'bX;
end 
// expected est[ 0 ]
initial
begin
	est_expected[0] = 1'bX;
end 
// generate trigger
always @(est_expected or est or pronto_expected or pronto or resultado_expected or resultado)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected est = %b | expected pronto = %b | expected resultado = %b | ",est_expected_prev,pronto_expected_prev,resultado_expected_prev);
	$display("| real est = %b | real pronto = %b | real resultado = %b | ",est_prev,pronto_prev,resultado_prev);
`endif
	if (
		( est_expected_prev[0] !== 1'bx ) && ( est_prev[0] !== est_expected_prev[0] )
		&& ((est_expected_prev[0] !== last_est_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port est[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", est_expected_prev);
		$display ("     Real value = %b", est_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_est_exp[0] = est_expected_prev[0];
	end
	if (
		( est_expected_prev[1] !== 1'bx ) && ( est_prev[1] !== est_expected_prev[1] )
		&& ((est_expected_prev[1] !== last_est_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port est[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", est_expected_prev);
		$display ("     Real value = %b", est_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_est_exp[1] = est_expected_prev[1];
	end
	if (
		( pronto_expected_prev !== 1'bx ) && ( pronto_prev !== pronto_expected_prev )
		&& ((pronto_expected_prev !== last_pronto_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pronto :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pronto_expected_prev);
		$display ("     Real value = %b", pronto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pronto_exp = pronto_expected_prev;
	end
	if (
		( resultado_expected_prev[0] !== 1'bx ) && ( resultado_prev[0] !== resultado_expected_prev[0] )
		&& ((resultado_expected_prev[0] !== last_resultado_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_resultado_exp[0] = resultado_expected_prev[0];
	end
	if (
		( resultado_expected_prev[1] !== 1'bx ) && ( resultado_prev[1] !== resultado_expected_prev[1] )
		&& ((resultado_expected_prev[1] !== last_resultado_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_resultado_exp[1] = resultado_expected_prev[1];
	end
	if (
		( resultado_expected_prev[2] !== 1'bx ) && ( resultado_prev[2] !== resultado_expected_prev[2] )
		&& ((resultado_expected_prev[2] !== last_resultado_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_resultado_exp[2] = resultado_expected_prev[2];
	end
	if (
		( resultado_expected_prev[3] !== 1'bx ) && ( resultado_prev[3] !== resultado_expected_prev[3] )
		&& ((resultado_expected_prev[3] !== last_resultado_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_resultado_exp[3] = resultado_expected_prev[3];
	end
	if (
		( resultado_expected_prev[4] !== 1'bx ) && ( resultado_prev[4] !== resultado_expected_prev[4] )
		&& ((resultado_expected_prev[4] !== last_resultado_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_resultado_exp[4] = resultado_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ContDe1_1always_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] A;
reg clk;
reg reset;
reg start;
// wires                                               
wire [1:0] est;
wire pronto;
wire [4:0] resultado;

wire sampler;                             

// assign statements (if any)                          
ContDe1_1always i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.clk(clk),
	.est(est),
	.pronto(pronto),
	.reset(reset),
	.resultado(resultado),
	.start(start)
);

// start
initial
begin
	start = 1'b0;
	start = #70000 1'b1;
	start = #290000 1'b0;
	start = #190000 1'b1;
	start = #30000 1'b0;
	start = #220000 1'b1;
	start = #10000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #50000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b1;
	A[15] = #300000 1'b0;
	A[15] = #210000 1'b1;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
	A[14] = #510000 1'b1;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
	A[13] = #780000 1'b1;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b1;
	A[12] = #300000 1'b0;
	A[12] = #210000 1'b1;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b1;
	A[11] = #300000 1'b0;
	A[11] = #480000 1'b1;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
	A[10] = #510000 1'b1;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
	A[9] = #510000 1'b1;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
	A[8] = #780000 1'b1;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b1;
	A[7] = #300000 1'b0;
	A[7] = #210000 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
	A[6] = #300000 1'b0;
	A[6] = #210000 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
	A[5] = #780000 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #510000 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #780000 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	A[2] = #510000 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
	A[1] = #300000 1'b0;
	A[1] = #210000 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
	A[0] = #780000 1'b1;
end 

ContDe1_1always_vlg_sample_tst tb_sample (
	.A(A),
	.clk(clk),
	.reset(reset),
	.start(start),
	.sampler_tx(sampler)
);

ContDe1_1always_vlg_check_tst tb_out(
	.est(est),
	.pronto(pronto),
	.resultado(resultado),
	.sampler_rx(sampler)
);
endmodule

