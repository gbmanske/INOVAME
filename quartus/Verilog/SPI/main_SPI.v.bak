/**
Serial Peripheral Interface (SPI) protocol very basic implementation.

Can handle ONE fixed SPI mode 
Mode 0: cpol-0 cpha-0 

For synchronization:
Modes 0 : slave needs to sample and send at rising edge

Tested only with default parameters.

**/

module spi_master_mode0 #(
// ---------------------------------------------------Parametros--------------------------------------------------//
	parameter REG_WIDTH  = 8,
	parameter COUNTER_WIDTH = $clog2(REG_WIDTH),
	parameter TRANS_SIZE = 8
)(
// ------------------------------------------------------Sistema----------------------------------------------------//
	input rstn, 
	input sys_clk, 
	input t_start,
	input [REG_WIDTH-1:0] data_in, // data to feed SPI buffer
	input [COUNTER_WIDTH:0] t_size, // transaction size, how many bits to transmit			

// -----------------------------------------------------------SPI------------------------------------------------------//
	input miso,
	output wire mosi,
	output reg spi_clk,
	output reg cs
);

reg [REG_WIDTH-1:0] shift_reg;
reg [COUNTER_WIDTH:0] count;

// process to generate and control the serial clock (idles low)
always @(*) begin
  // write here
end

// process to control the clock counter and chip select signals
always @(posedge sys_clk) begin
  // write here
end

// assignment to send MSB first
// assign mosi = ...

// process to sample miso at negedge 
always @(negedge spi_clk or negedge rstn) begin
  // write here
end

endmodule