// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/03/2024 16:22:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    spi_slave_ex
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module spi_slave_ex_vlg_sample_tst(
	cs,
	mosi,
	rst,
	sclk,
	sampler_tx
);
input  cs;
input  mosi;
input  rst;
input  sclk;
output sampler_tx;

reg sample;
time current_time;
always @(cs or mosi or rst or sclk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module spi_slave_ex_vlg_check_tst (
	miso,
	teste,
	sampler_rx
);
input  miso;
input [7:0] teste;
input sampler_rx;

reg  miso_expected;
reg [7:0] teste_expected;

reg  miso_prev;
reg [7:0] teste_prev;

reg  miso_expected_prev;
reg [7:0] teste_expected_prev;

reg  last_miso_exp;
reg [7:0] last_teste_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	miso_prev = miso;
	teste_prev = teste;
end

// update expected /o prevs

always @(trigger)
begin
	miso_expected_prev = miso_expected;
	teste_expected_prev = teste_expected;
end



// expected miso
initial
begin
	miso_expected = 1'bX;
end 
// expected teste[ 7 ]
initial
begin
	teste_expected[7] = 1'bX;
end 
// expected teste[ 6 ]
initial
begin
	teste_expected[6] = 1'bX;
end 
// expected teste[ 5 ]
initial
begin
	teste_expected[5] = 1'bX;
end 
// expected teste[ 4 ]
initial
begin
	teste_expected[4] = 1'bX;
end 
// expected teste[ 3 ]
initial
begin
	teste_expected[3] = 1'bX;
end 
// expected teste[ 2 ]
initial
begin
	teste_expected[2] = 1'bX;
end 
// expected teste[ 1 ]
initial
begin
	teste_expected[1] = 1'bX;
end 
// expected teste[ 0 ]
initial
begin
	teste_expected[0] = 1'bX;
end 
// generate trigger
always @(miso_expected or miso or teste_expected or teste)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected miso = %b | expected teste = %b | ",miso_expected_prev,teste_expected_prev);
	$display("| real miso = %b | real teste = %b | ",miso_prev,teste_prev);
`endif
	if (
		( miso_expected_prev !== 1'bx ) && ( miso_prev !== miso_expected_prev )
		&& ((miso_expected_prev !== last_miso_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port miso :: @time = %t",  $realtime);
		$display ("     Expected value = %b", miso_expected_prev);
		$display ("     Real value = %b", miso_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_miso_exp = miso_expected_prev;
	end
	if (
		( teste_expected_prev[0] !== 1'bx ) && ( teste_prev[0] !== teste_expected_prev[0] )
		&& ((teste_expected_prev[0] !== last_teste_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[0] = teste_expected_prev[0];
	end
	if (
		( teste_expected_prev[1] !== 1'bx ) && ( teste_prev[1] !== teste_expected_prev[1] )
		&& ((teste_expected_prev[1] !== last_teste_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[1] = teste_expected_prev[1];
	end
	if (
		( teste_expected_prev[2] !== 1'bx ) && ( teste_prev[2] !== teste_expected_prev[2] )
		&& ((teste_expected_prev[2] !== last_teste_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[2] = teste_expected_prev[2];
	end
	if (
		( teste_expected_prev[3] !== 1'bx ) && ( teste_prev[3] !== teste_expected_prev[3] )
		&& ((teste_expected_prev[3] !== last_teste_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[3] = teste_expected_prev[3];
	end
	if (
		( teste_expected_prev[4] !== 1'bx ) && ( teste_prev[4] !== teste_expected_prev[4] )
		&& ((teste_expected_prev[4] !== last_teste_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[4] = teste_expected_prev[4];
	end
	if (
		( teste_expected_prev[5] !== 1'bx ) && ( teste_prev[5] !== teste_expected_prev[5] )
		&& ((teste_expected_prev[5] !== last_teste_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[5] = teste_expected_prev[5];
	end
	if (
		( teste_expected_prev[6] !== 1'bx ) && ( teste_prev[6] !== teste_expected_prev[6] )
		&& ((teste_expected_prev[6] !== last_teste_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[6] = teste_expected_prev[6];
	end
	if (
		( teste_expected_prev[7] !== 1'bx ) && ( teste_prev[7] !== teste_expected_prev[7] )
		&& ((teste_expected_prev[7] !== last_teste_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[7] = teste_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module spi_slave_ex_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cs;
reg mosi;
reg rst;
reg sclk;
// wires                                               
wire miso;
wire [7:0] teste;

wire sampler;                             

// assign statements (if any)                          
spi_slave_ex i1 (
// port map - connection between master ports and signals/registers   
	.cs(cs),
	.miso(miso),
	.mosi(mosi),
	.rst(rst),
	.sclk(sclk),
	.teste(teste)
);

// sclk
initial
begin
	sclk = 1'b1;
	# 5000;
	repeat(99)
	begin
		sclk = 1'b0;
		sclk = #5000 1'b1;
		# 5000;
	end
	sclk = 1'b0;
end 

// cs
initial
begin
	cs = 1'b1;
	cs = #50000 1'b0;
	cs = #620000 1'b1;
	cs = #20000 1'b0;
	cs = #160000 1'b1;
	cs = #30000 1'b0;
end 

// mosi
initial
begin
	mosi = 1'b1;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #20000 1'b1;
end 

spi_slave_ex_vlg_sample_tst tb_sample (
	.cs(cs),
	.mosi(mosi),
	.rst(rst),
	.sclk(sclk),
	.sampler_tx(sampler)
);

spi_slave_ex_vlg_check_tst tb_out(
	.miso(miso),
	.teste(teste),
	.sampler_rx(sampler)
);
endmodule

