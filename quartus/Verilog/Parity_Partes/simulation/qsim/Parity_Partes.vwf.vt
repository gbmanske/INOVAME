// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2024 14:50:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Parity_Partes
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Parity_Partes_vlg_sample_tst(
	A,
	clk,
	rst,
	start,
	sampler_tx
);
input [31:0] A;
input  clk;
input  rst;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(A or clk or rst or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Parity_Partes_vlg_check_tst (
	Areg,
	S,
	done,
	estado,
	val,
	sampler_rx
);
input [31:0] Areg;
input [8:0] S;
input  done;
input [2:0] estado;
input  val;
input sampler_rx;

reg [31:0] Areg_expected;
reg [8:0] S_expected;
reg  done_expected;
reg [2:0] estado_expected;
reg  val_expected;

reg [31:0] Areg_prev;
reg [8:0] S_prev;
reg  done_prev;
reg [2:0] estado_prev;
reg  val_prev;

reg [31:0] Areg_expected_prev;
reg [8:0] S_expected_prev;
reg  done_expected_prev;
reg [2:0] estado_expected_prev;
reg  val_expected_prev;

reg [31:0] last_Areg_exp;
reg [8:0] last_S_exp;
reg  last_done_exp;
reg [2:0] last_estado_exp;
reg  last_val_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	Areg_prev = Areg;
	S_prev = S;
	done_prev = done;
	estado_prev = estado;
	val_prev = val;
end

// update expected /o prevs

always @(trigger)
begin
	Areg_expected_prev = Areg_expected;
	S_expected_prev = S_expected;
	done_expected_prev = done_expected;
	estado_expected_prev = estado_expected;
	val_expected_prev = val_expected;
end


// expected Areg[ 31 ]
initial
begin
	Areg_expected[31] = 1'bX;
end 
// expected Areg[ 30 ]
initial
begin
	Areg_expected[30] = 1'bX;
end 
// expected Areg[ 29 ]
initial
begin
	Areg_expected[29] = 1'bX;
end 
// expected Areg[ 28 ]
initial
begin
	Areg_expected[28] = 1'bX;
end 
// expected Areg[ 27 ]
initial
begin
	Areg_expected[27] = 1'bX;
end 
// expected Areg[ 26 ]
initial
begin
	Areg_expected[26] = 1'bX;
end 
// expected Areg[ 25 ]
initial
begin
	Areg_expected[25] = 1'bX;
end 
// expected Areg[ 24 ]
initial
begin
	Areg_expected[24] = 1'bX;
end 
// expected Areg[ 23 ]
initial
begin
	Areg_expected[23] = 1'bX;
end 
// expected Areg[ 22 ]
initial
begin
	Areg_expected[22] = 1'bX;
end 
// expected Areg[ 21 ]
initial
begin
	Areg_expected[21] = 1'bX;
end 
// expected Areg[ 20 ]
initial
begin
	Areg_expected[20] = 1'bX;
end 
// expected Areg[ 19 ]
initial
begin
	Areg_expected[19] = 1'bX;
end 
// expected Areg[ 18 ]
initial
begin
	Areg_expected[18] = 1'bX;
end 
// expected Areg[ 17 ]
initial
begin
	Areg_expected[17] = 1'bX;
end 
// expected Areg[ 16 ]
initial
begin
	Areg_expected[16] = 1'bX;
end 
// expected Areg[ 15 ]
initial
begin
	Areg_expected[15] = 1'bX;
end 
// expected Areg[ 14 ]
initial
begin
	Areg_expected[14] = 1'bX;
end 
// expected Areg[ 13 ]
initial
begin
	Areg_expected[13] = 1'bX;
end 
// expected Areg[ 12 ]
initial
begin
	Areg_expected[12] = 1'bX;
end 
// expected Areg[ 11 ]
initial
begin
	Areg_expected[11] = 1'bX;
end 
// expected Areg[ 10 ]
initial
begin
	Areg_expected[10] = 1'bX;
end 
// expected Areg[ 9 ]
initial
begin
	Areg_expected[9] = 1'bX;
end 
// expected Areg[ 8 ]
initial
begin
	Areg_expected[8] = 1'bX;
end 
// expected Areg[ 7 ]
initial
begin
	Areg_expected[7] = 1'bX;
end 
// expected Areg[ 6 ]
initial
begin
	Areg_expected[6] = 1'bX;
end 
// expected Areg[ 5 ]
initial
begin
	Areg_expected[5] = 1'bX;
end 
// expected Areg[ 4 ]
initial
begin
	Areg_expected[4] = 1'bX;
end 
// expected Areg[ 3 ]
initial
begin
	Areg_expected[3] = 1'bX;
end 
// expected Areg[ 2 ]
initial
begin
	Areg_expected[2] = 1'bX;
end 
// expected Areg[ 1 ]
initial
begin
	Areg_expected[1] = 1'bX;
end 
// expected Areg[ 0 ]
initial
begin
	Areg_expected[0] = 1'bX;
end 
// expected estado[ 2 ]
initial
begin
	estado_expected[2] = 1'bX;
end 
// expected estado[ 1 ]
initial
begin
	estado_expected[1] = 1'bX;
end 
// expected estado[ 0 ]
initial
begin
	estado_expected[0] = 1'bX;
end 
// expected S[ 8 ]
initial
begin
	S_expected[8] = 1'bX;
end 
// expected S[ 7 ]
initial
begin
	S_expected[7] = 1'bX;
end 
// expected S[ 6 ]
initial
begin
	S_expected[6] = 1'bX;
end 
// expected S[ 5 ]
initial
begin
	S_expected[5] = 1'bX;
end 
// expected S[ 4 ]
initial
begin
	S_expected[4] = 1'bX;
end 
// expected S[ 3 ]
initial
begin
	S_expected[3] = 1'bX;
end 
// expected S[ 2 ]
initial
begin
	S_expected[2] = 1'bX;
end 
// expected S[ 1 ]
initial
begin
	S_expected[1] = 1'bX;
end 
// expected S[ 0 ]
initial
begin
	S_expected[0] = 1'bX;
end 

// expected done
initial
begin
	done_expected = 1'bX;
end 

// expected val
initial
begin
	val_expected = 1'bX;
end 
// generate trigger
always @(Areg_expected or Areg or S_expected or S or done_expected or done or estado_expected or estado or val_expected or val)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Areg = %b | expected S = %b | expected done = %b | expected estado = %b | expected val = %b | ",Areg_expected_prev,S_expected_prev,done_expected_prev,estado_expected_prev,val_expected_prev);
	$display("| real Areg = %b | real S = %b | real done = %b | real estado = %b | real val = %b | ",Areg_prev,S_prev,done_prev,estado_prev,val_prev);
`endif
	if (
		( Areg_expected_prev[0] !== 1'bx ) && ( Areg_prev[0] !== Areg_expected_prev[0] )
		&& ((Areg_expected_prev[0] !== last_Areg_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[0] = Areg_expected_prev[0];
	end
	if (
		( Areg_expected_prev[1] !== 1'bx ) && ( Areg_prev[1] !== Areg_expected_prev[1] )
		&& ((Areg_expected_prev[1] !== last_Areg_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[1] = Areg_expected_prev[1];
	end
	if (
		( Areg_expected_prev[2] !== 1'bx ) && ( Areg_prev[2] !== Areg_expected_prev[2] )
		&& ((Areg_expected_prev[2] !== last_Areg_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[2] = Areg_expected_prev[2];
	end
	if (
		( Areg_expected_prev[3] !== 1'bx ) && ( Areg_prev[3] !== Areg_expected_prev[3] )
		&& ((Areg_expected_prev[3] !== last_Areg_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[3] = Areg_expected_prev[3];
	end
	if (
		( Areg_expected_prev[4] !== 1'bx ) && ( Areg_prev[4] !== Areg_expected_prev[4] )
		&& ((Areg_expected_prev[4] !== last_Areg_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[4] = Areg_expected_prev[4];
	end
	if (
		( Areg_expected_prev[5] !== 1'bx ) && ( Areg_prev[5] !== Areg_expected_prev[5] )
		&& ((Areg_expected_prev[5] !== last_Areg_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[5] = Areg_expected_prev[5];
	end
	if (
		( Areg_expected_prev[6] !== 1'bx ) && ( Areg_prev[6] !== Areg_expected_prev[6] )
		&& ((Areg_expected_prev[6] !== last_Areg_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[6] = Areg_expected_prev[6];
	end
	if (
		( Areg_expected_prev[7] !== 1'bx ) && ( Areg_prev[7] !== Areg_expected_prev[7] )
		&& ((Areg_expected_prev[7] !== last_Areg_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[7] = Areg_expected_prev[7];
	end
	if (
		( Areg_expected_prev[8] !== 1'bx ) && ( Areg_prev[8] !== Areg_expected_prev[8] )
		&& ((Areg_expected_prev[8] !== last_Areg_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[8] = Areg_expected_prev[8];
	end
	if (
		( Areg_expected_prev[9] !== 1'bx ) && ( Areg_prev[9] !== Areg_expected_prev[9] )
		&& ((Areg_expected_prev[9] !== last_Areg_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[9] = Areg_expected_prev[9];
	end
	if (
		( Areg_expected_prev[10] !== 1'bx ) && ( Areg_prev[10] !== Areg_expected_prev[10] )
		&& ((Areg_expected_prev[10] !== last_Areg_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[10] = Areg_expected_prev[10];
	end
	if (
		( Areg_expected_prev[11] !== 1'bx ) && ( Areg_prev[11] !== Areg_expected_prev[11] )
		&& ((Areg_expected_prev[11] !== last_Areg_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[11] = Areg_expected_prev[11];
	end
	if (
		( Areg_expected_prev[12] !== 1'bx ) && ( Areg_prev[12] !== Areg_expected_prev[12] )
		&& ((Areg_expected_prev[12] !== last_Areg_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[12] = Areg_expected_prev[12];
	end
	if (
		( Areg_expected_prev[13] !== 1'bx ) && ( Areg_prev[13] !== Areg_expected_prev[13] )
		&& ((Areg_expected_prev[13] !== last_Areg_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[13] = Areg_expected_prev[13];
	end
	if (
		( Areg_expected_prev[14] !== 1'bx ) && ( Areg_prev[14] !== Areg_expected_prev[14] )
		&& ((Areg_expected_prev[14] !== last_Areg_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[14] = Areg_expected_prev[14];
	end
	if (
		( Areg_expected_prev[15] !== 1'bx ) && ( Areg_prev[15] !== Areg_expected_prev[15] )
		&& ((Areg_expected_prev[15] !== last_Areg_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[15] = Areg_expected_prev[15];
	end
	if (
		( Areg_expected_prev[16] !== 1'bx ) && ( Areg_prev[16] !== Areg_expected_prev[16] )
		&& ((Areg_expected_prev[16] !== last_Areg_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[16] = Areg_expected_prev[16];
	end
	if (
		( Areg_expected_prev[17] !== 1'bx ) && ( Areg_prev[17] !== Areg_expected_prev[17] )
		&& ((Areg_expected_prev[17] !== last_Areg_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[17] = Areg_expected_prev[17];
	end
	if (
		( Areg_expected_prev[18] !== 1'bx ) && ( Areg_prev[18] !== Areg_expected_prev[18] )
		&& ((Areg_expected_prev[18] !== last_Areg_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[18] = Areg_expected_prev[18];
	end
	if (
		( Areg_expected_prev[19] !== 1'bx ) && ( Areg_prev[19] !== Areg_expected_prev[19] )
		&& ((Areg_expected_prev[19] !== last_Areg_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[19] = Areg_expected_prev[19];
	end
	if (
		( Areg_expected_prev[20] !== 1'bx ) && ( Areg_prev[20] !== Areg_expected_prev[20] )
		&& ((Areg_expected_prev[20] !== last_Areg_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[20] = Areg_expected_prev[20];
	end
	if (
		( Areg_expected_prev[21] !== 1'bx ) && ( Areg_prev[21] !== Areg_expected_prev[21] )
		&& ((Areg_expected_prev[21] !== last_Areg_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[21] = Areg_expected_prev[21];
	end
	if (
		( Areg_expected_prev[22] !== 1'bx ) && ( Areg_prev[22] !== Areg_expected_prev[22] )
		&& ((Areg_expected_prev[22] !== last_Areg_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[22] = Areg_expected_prev[22];
	end
	if (
		( Areg_expected_prev[23] !== 1'bx ) && ( Areg_prev[23] !== Areg_expected_prev[23] )
		&& ((Areg_expected_prev[23] !== last_Areg_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[23] = Areg_expected_prev[23];
	end
	if (
		( Areg_expected_prev[24] !== 1'bx ) && ( Areg_prev[24] !== Areg_expected_prev[24] )
		&& ((Areg_expected_prev[24] !== last_Areg_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[24] = Areg_expected_prev[24];
	end
	if (
		( Areg_expected_prev[25] !== 1'bx ) && ( Areg_prev[25] !== Areg_expected_prev[25] )
		&& ((Areg_expected_prev[25] !== last_Areg_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[25] = Areg_expected_prev[25];
	end
	if (
		( Areg_expected_prev[26] !== 1'bx ) && ( Areg_prev[26] !== Areg_expected_prev[26] )
		&& ((Areg_expected_prev[26] !== last_Areg_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[26] = Areg_expected_prev[26];
	end
	if (
		( Areg_expected_prev[27] !== 1'bx ) && ( Areg_prev[27] !== Areg_expected_prev[27] )
		&& ((Areg_expected_prev[27] !== last_Areg_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[27] = Areg_expected_prev[27];
	end
	if (
		( Areg_expected_prev[28] !== 1'bx ) && ( Areg_prev[28] !== Areg_expected_prev[28] )
		&& ((Areg_expected_prev[28] !== last_Areg_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[28] = Areg_expected_prev[28];
	end
	if (
		( Areg_expected_prev[29] !== 1'bx ) && ( Areg_prev[29] !== Areg_expected_prev[29] )
		&& ((Areg_expected_prev[29] !== last_Areg_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[29] = Areg_expected_prev[29];
	end
	if (
		( Areg_expected_prev[30] !== 1'bx ) && ( Areg_prev[30] !== Areg_expected_prev[30] )
		&& ((Areg_expected_prev[30] !== last_Areg_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[30] = Areg_expected_prev[30];
	end
	if (
		( Areg_expected_prev[31] !== 1'bx ) && ( Areg_prev[31] !== Areg_expected_prev[31] )
		&& ((Areg_expected_prev[31] !== last_Areg_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[31] = Areg_expected_prev[31];
	end
	if (
		( S_expected_prev[0] !== 1'bx ) && ( S_prev[0] !== S_expected_prev[0] )
		&& ((S_expected_prev[0] !== last_S_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[0] = S_expected_prev[0];
	end
	if (
		( S_expected_prev[1] !== 1'bx ) && ( S_prev[1] !== S_expected_prev[1] )
		&& ((S_expected_prev[1] !== last_S_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[1] = S_expected_prev[1];
	end
	if (
		( S_expected_prev[2] !== 1'bx ) && ( S_prev[2] !== S_expected_prev[2] )
		&& ((S_expected_prev[2] !== last_S_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[2] = S_expected_prev[2];
	end
	if (
		( S_expected_prev[3] !== 1'bx ) && ( S_prev[3] !== S_expected_prev[3] )
		&& ((S_expected_prev[3] !== last_S_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[3] = S_expected_prev[3];
	end
	if (
		( S_expected_prev[4] !== 1'bx ) && ( S_prev[4] !== S_expected_prev[4] )
		&& ((S_expected_prev[4] !== last_S_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[4] = S_expected_prev[4];
	end
	if (
		( S_expected_prev[5] !== 1'bx ) && ( S_prev[5] !== S_expected_prev[5] )
		&& ((S_expected_prev[5] !== last_S_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[5] = S_expected_prev[5];
	end
	if (
		( S_expected_prev[6] !== 1'bx ) && ( S_prev[6] !== S_expected_prev[6] )
		&& ((S_expected_prev[6] !== last_S_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[6] = S_expected_prev[6];
	end
	if (
		( S_expected_prev[7] !== 1'bx ) && ( S_prev[7] !== S_expected_prev[7] )
		&& ((S_expected_prev[7] !== last_S_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[7] = S_expected_prev[7];
	end
	if (
		( S_expected_prev[8] !== 1'bx ) && ( S_prev[8] !== S_expected_prev[8] )
		&& ((S_expected_prev[8] !== last_S_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[8] = S_expected_prev[8];
	end
	if (
		( done_expected_prev !== 1'bx ) && ( done_prev !== done_expected_prev )
		&& ((done_expected_prev !== last_done_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_expected_prev);
		$display ("     Real value = %b", done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_done_exp = done_expected_prev;
	end
	if (
		( estado_expected_prev[0] !== 1'bx ) && ( estado_prev[0] !== estado_expected_prev[0] )
		&& ((estado_expected_prev[0] !== last_estado_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_estado_exp[0] = estado_expected_prev[0];
	end
	if (
		( estado_expected_prev[1] !== 1'bx ) && ( estado_prev[1] !== estado_expected_prev[1] )
		&& ((estado_expected_prev[1] !== last_estado_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_estado_exp[1] = estado_expected_prev[1];
	end
	if (
		( estado_expected_prev[2] !== 1'bx ) && ( estado_prev[2] !== estado_expected_prev[2] )
		&& ((estado_expected_prev[2] !== last_estado_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_estado_exp[2] = estado_expected_prev[2];
	end
	if (
		( val_expected_prev !== 1'bx ) && ( val_prev !== val_expected_prev )
		&& ((val_expected_prev !== last_val_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_val_exp = val_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Parity_Partes_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] A;
reg clk;
reg rst;
reg start;
// wires                                               
wire [31:0] Areg;
wire [8:0] S;
wire done;
wire [2:0] estado;
wire val;

wire sampler;                             

// assign statements (if any)                          
Parity_Partes i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.Areg(Areg),
	.S(S),
	.clk(clk),
	.done(done),
	.estado(estado),
	.rst(rst),
	.start(start),
	.val(val)
);
// A[ 31 ]
initial
begin
	A[31] = 1'b0;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b0;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b1;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b1;
	A[28] = #390000 1'b0;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b1;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b0;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b0;
	A[25] = #390000 1'b1;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b1;
	A[24] = #390000 1'b0;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b1;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b1;
	A[22] = #390000 1'b0;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b0;
	A[21] = #390000 1'b1;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b1;
	A[20] = #390000 1'b0;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b0;
	A[19] = #390000 1'b1;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b1;
	A[18] = #390000 1'b0;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b0;
	A[17] = #390000 1'b1;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b1;
	A[16] = #390000 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
	A[15] = #390000 1'b1;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
	A[14] = #390000 1'b1;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b1;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
	A[12] = #390000 1'b1;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b1;
	A[11] = #390000 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b1;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
	A[9] = #390000 1'b1;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
	A[6] = #390000 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
	A[5] = #390000 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
	A[4] = #390000 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
	A[2] = #390000 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 

// clk
initial
begin
	repeat(33)
	begin
		clk = 1'b0;
		clk = #15000 1'b1;
		# 15000;
	end
	clk = 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #30000 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #70000 1'b1;
	start = #30000 1'b0;
	start = #330000 1'b1;
	start = #20000 1'b0;
end 

Parity_Partes_vlg_sample_tst tb_sample (
	.A(A),
	.clk(clk),
	.rst(rst),
	.start(start),
	.sampler_tx(sampler)
);

Parity_Partes_vlg_check_tst tb_out(
	.Areg(Areg),
	.S(S),
	.done(done),
	.estado(estado),
	.val(val),
	.sampler_rx(sampler)
);
endmodule

