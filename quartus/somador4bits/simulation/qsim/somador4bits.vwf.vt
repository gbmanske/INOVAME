// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2024 20:18:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    somador4bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module somador4bits_vlg_sample_tst(
	a0,
	a1,
	a2,
	a3,
	b0,
	b1,
	b2,
	b3,
	cin,
	sampler_tx
);
input  a0;
input  a1;
input  a2;
input  a3;
input  b0;
input  b1;
input  b2;
input  b3;
input  cin;
output sampler_tx;

reg sample;
time current_time;
always @(a0 or a1 or a2 or a3 or b0 or b1 or b2 or b3 or cin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module somador4bits_vlg_check_tst (
	cout,
	s0,
	s1,
	s2,
	s3,
	sampler_rx
);
input  cout;
input  s0;
input  s1;
input  s2;
input  s3;
input sampler_rx;

reg  cout_expected;
reg  s0_expected;
reg  s1_expected;
reg  s2_expected;
reg  s3_expected;

reg  cout_prev;
reg  s0_prev;
reg  s1_prev;
reg  s2_prev;
reg  s3_prev;

reg  cout_expected_prev;
reg  s0_expected_prev;
reg  s1_expected_prev;
reg  s2_expected_prev;
reg  s3_expected_prev;

reg  last_cout_exp;
reg  last_s0_exp;
reg  last_s1_exp;
reg  last_s2_exp;
reg  last_s3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	cout_prev = cout;
	s0_prev = s0;
	s1_prev = s1;
	s2_prev = s2;
	s3_prev = s3;
end

// update expected /o prevs

always @(trigger)
begin
	cout_expected_prev = cout_expected;
	s0_expected_prev = s0_expected;
	s1_expected_prev = s1_expected;
	s2_expected_prev = s2_expected;
	s3_expected_prev = s3_expected;
end



// expected s3
initial
begin
	s3_expected = 1'bX;
end 

// expected s2
initial
begin
	s2_expected = 1'bX;
end 

// expected s1
initial
begin
	s1_expected = 1'bX;
end 

// expected s0
initial
begin
	s0_expected = 1'bX;
end 

// expected cout
initial
begin
	cout_expected = 1'bX;
end 
// generate trigger
always @(cout_expected or cout or s0_expected or s0 or s1_expected or s1 or s2_expected or s2 or s3_expected or s3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cout = %b | expected s0 = %b | expected s1 = %b | expected s2 = %b | expected s3 = %b | ",cout_expected_prev,s0_expected_prev,s1_expected_prev,s2_expected_prev,s3_expected_prev);
	$display("| real cout = %b | real s0 = %b | real s1 = %b | real s2 = %b | real s3 = %b | ",cout_prev,s0_prev,s1_prev,s2_prev,s3_prev);
`endif
	if (
		( cout_expected_prev !== 1'bx ) && ( cout_prev !== cout_expected_prev )
		&& ((cout_expected_prev !== last_cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cout_expected_prev);
		$display ("     Real value = %b", cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cout_exp = cout_expected_prev;
	end
	if (
		( s0_expected_prev !== 1'bx ) && ( s0_prev !== s0_expected_prev )
		&& ((s0_expected_prev !== last_s0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s0_expected_prev);
		$display ("     Real value = %b", s0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s0_exp = s0_expected_prev;
	end
	if (
		( s1_expected_prev !== 1'bx ) && ( s1_prev !== s1_expected_prev )
		&& ((s1_expected_prev !== last_s1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s1_exp = s1_expected_prev;
	end
	if (
		( s2_expected_prev !== 1'bx ) && ( s2_prev !== s2_expected_prev )
		&& ((s2_expected_prev !== last_s2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s2_expected_prev);
		$display ("     Real value = %b", s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s2_exp = s2_expected_prev;
	end
	if (
		( s3_expected_prev !== 1'bx ) && ( s3_prev !== s3_expected_prev )
		&& ((s3_expected_prev !== last_s3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s3_expected_prev);
		$display ("     Real value = %b", s3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_s3_exp = s3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module somador4bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a0;
reg a1;
reg a2;
reg a3;
reg b0;
reg b1;
reg b2;
reg b3;
reg cin;
// wires                                               
wire cout;
wire s0;
wire s1;
wire s2;
wire s3;

wire sampler;                             

// assign statements (if any)                          
somador4bits i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.cin(cin),
	.cout(cout),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3)
);

// a3
always
begin
	a3 = 1'b0;
	a3 = #512000 1'b1;
	#488000;
end 

// a2
always
begin
	a2 = 1'b0;
	a2 = #256000 1'b1;
	a2 = #256000 1'b0;
	a2 = #256000 1'b1;
	#232000;
end 

// a1
always
begin
	a1 = 1'b0;
	a1 = #128000 1'b1;
	# 128000;
	repeat(2)
	begin
		a1 = 1'b0;
		a1 = #128000 1'b1;
		# 128000;
	end
	a1 = 1'b0;
	a1 = #128000 1'b1;
	#104000;
end 

// a0
always
begin
	a0 = 1'b0;
	a0 = #64000 1'b1;
	# 64000;
	repeat(6)
	begin
		a0 = 1'b0;
		a0 = #64000 1'b1;
		# 64000;
	end
	a0 = 1'b0;
	a0 = #64000 1'b1;
	#40000;
end 

// b3
always
begin
	b3 = 1'b0;
	b3 = #32000 1'b1;
	# 32000;
	repeat(14)
	begin
		b3 = 1'b0;
		b3 = #32000 1'b1;
		# 32000;
	end
	b3 = 1'b0;
	b3 = #32000 1'b1;
	#8000;
end 

// b2
always
begin
	b2 = 1'b0;
	b2 = #16000 1'b1;
	# 16000;
	repeat(30)
	begin
		b2 = 1'b0;
		b2 = #16000 1'b1;
		# 16000;
	end
	b2 = 1'b0;
	#8000;
end 

// b1
always
begin
	b1 = 1'b0;
	b1 = #8000 1'b1;
	# 8000;
	repeat(61)
	begin
		b1 = 1'b0;
		b1 = #8000 1'b1;
		# 8000;
	end
	b1 = 1'b0;
	#8000;
end 

// b0
always
begin
	b0 = 1'b0;
	b0 = #4000 1'b1;
	# 4000;
	repeat(123)
	begin
		b0 = 1'b0;
		b0 = #4000 1'b1;
		# 4000;
	end
	b0 = 1'b0;
	b0 = #4000 1'b1;
	#4000;
end 

// cin
initial
begin
	cin = 1'b0;
	cin = #460000 1'b1;
	cin = #460000 1'b0;
end 

somador4bits_vlg_sample_tst tb_sample (
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.cin(cin),
	.sampler_tx(sampler)
);

somador4bits_vlg_check_tst tb_out(
	.cout(cout),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.sampler_rx(sampler)
);
endmodule

